{"ast":null,"code":"var core = require('../../core'); // @see https://github.com/substack/brfs/issues/25\n\n\nvar fs = require('fs');\n/**\n * @author Vico @vicocotea\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n */\n\n/**\n * A Noise effect filter.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\n\n\nfunction NoiseFilter() {\n  core.AbstractFilter.call(this, // vertex shader\n  null, // fragment shader\n  fs.readFileSync(__dirname + '/noise.frag', 'utf8'), // custom uniforms\n  {\n    noise: {\n      type: '1f',\n      value: 0.5\n    }\n  });\n}\n\nNoiseFilter.prototype = Object.create(core.AbstractFilter.prototype);\nNoiseFilter.prototype.constructor = NoiseFilter;\nmodule.exports = NoiseFilter;\nObject.defineProperties(NoiseFilter.prototype, {\n  /**\n   * The amount of noise to apply.\n   *\n   * @member {number}\n   * @memberof NoiseFilter#\n   * @default 0.5\n   */\n  noise: {\n    get: function () {\n      return this.uniforms.noise.value;\n    },\n    set: function (value) {\n      this.uniforms.noise.value = value;\n    }\n  }\n});","map":{"version":3,"names":["core","require","fs","NoiseFilter","AbstractFilter","call","readFileSync","__dirname","noise","type","value","prototype","Object","create","constructor","module","exports","defineProperties","get","uniforms","set"],"sources":["/home/reyden-martin/Documents/Tech2/HUB/Sony CSL/SONY-CSL-PROJECT/node_modules/react-piano-roll/node_modules/pixi.js/src/filters/noise/NoiseFilter.js"],"sourcesContent":["var core = require('../../core');\n// @see https://github.com/substack/brfs/issues/25\nvar fs = require('fs');\n\n/**\n * @author Vico @vicocotea\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n */\n\n/**\n * A Noise effect filter.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\nfunction NoiseFilter()\n{\n    core.AbstractFilter.call(this,\n        // vertex shader\n        null,\n        // fragment shader\n        fs.readFileSync(__dirname + '/noise.frag', 'utf8'),\n        // custom uniforms\n        {\n            noise: { type: '1f', value: 0.5 }\n        }\n    );\n}\n\nNoiseFilter.prototype = Object.create(core.AbstractFilter.prototype);\nNoiseFilter.prototype.constructor = NoiseFilter;\nmodule.exports = NoiseFilter;\n\nObject.defineProperties(NoiseFilter.prototype, {\n    /**\n     * The amount of noise to apply.\n     *\n     * @member {number}\n     * @memberof NoiseFilter#\n     * @default 0.5\n     */\n    noise: {\n        get: function ()\n        {\n            return this.uniforms.noise.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.noise.value = value;\n        }\n    }\n});\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAAlB,C,CACA;;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,GACA;EACIH,IAAI,CAACI,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,EACI;EACA,IAFJ,EAGI;EACAH,EAAE,CAACI,YAAH,CAAgBC,SAAS,GAAG,aAA5B,EAA2C,MAA3C,CAJJ,EAKI;EACA;IACIC,KAAK,EAAE;MAAEC,IAAI,EAAE,IAAR;MAAcC,KAAK,EAAE;IAArB;EADX,CANJ;AAUH;;AAEDP,WAAW,CAACQ,SAAZ,GAAwBC,MAAM,CAACC,MAAP,CAAcb,IAAI,CAACI,cAAL,CAAoBO,SAAlC,CAAxB;AACAR,WAAW,CAACQ,SAAZ,CAAsBG,WAAtB,GAAoCX,WAApC;AACAY,MAAM,CAACC,OAAP,GAAiBb,WAAjB;AAEAS,MAAM,CAACK,gBAAP,CAAwBd,WAAW,CAACQ,SAApC,EAA+C;EAC3C;AACJ;AACA;AACA;AACA;AACA;AACA;EACIH,KAAK,EAAE;IACHU,GAAG,EAAE,YACL;MACI,OAAO,KAAKC,QAAL,CAAcX,KAAd,CAAoBE,KAA3B;IACH,CAJE;IAKHU,GAAG,EAAE,UAAUV,KAAV,EACL;MACI,KAAKS,QAAL,CAAcX,KAAd,CAAoBE,KAApB,GAA4BA,KAA5B;IACH;EARE;AARoC,CAA/C"},"metadata":{},"sourceType":"script"}