{"ast":null,"code":"/**\n * Helper class to create a quad\n * @class\n * @memberof PIXI\n * @param gl {WebGLRenderingContext} The gl context for this quad to use.\n */\nfunction Quad(gl) {\n  /*\n   * the current WebGL drawing context\n   *\n   * @member {WebGLRenderingContext}\n   */\n  this.gl = gl; //    this.textures = new TextureUvs();\n\n  /**\n   * An array of vertices\n   *\n   * @member {Float32Array}\n   */\n\n  this.vertices = new Float32Array([0, 0, 200, 0, 200, 200, 0, 200]);\n  /**\n   * The Uvs of the quad\n   *\n   * @member {Float32Array}\n   */\n\n  this.uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]); //    var white = (0xFFFFFF >> 16) + (0xFFFFFF & 0xff00) + ((0xFFFFFF & 0xff) << 16) + (1 * 255 << 24);\n  //TODO convert this to a 32 unsigned int array\n\n  /**\n   * The color components of the triangles\n   *\n   * @member {Float32Array}\n   */\n\n  this.colors = new Float32Array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);\n  /*\n   * @member {Uint16Array} An array containing the indices of the vertices\n   */\n\n  this.indices = new Uint16Array([0, 1, 2, 0, 3, 2]);\n  /*\n   * @member {WebGLBuffer} The vertex buffer\n   */\n\n  this.vertexBuffer = gl.createBuffer();\n  /*\n   * @member {WebGLBuffer} The index buffer\n   */\n\n  this.indexBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, (8 + 8 + 16) * 4, gl.DYNAMIC_DRAW);\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n  this.upload();\n}\n\nQuad.prototype.constructor = Quad;\n/**\n * Maps two Rectangle to the quad\n * @param rect {Rectangle} the first rectangle\n * @param rect2 {Rectangle} the second rectangle\n */\n\nQuad.prototype.map = function (rect, rect2) {\n  var x = 0; //rect2.x / rect.width;\n\n  var y = 0; //rect2.y / rect.height;\n\n  this.uvs[0] = x;\n  this.uvs[1] = y;\n  this.uvs[2] = x + rect2.width / rect.width;\n  this.uvs[3] = y;\n  this.uvs[4] = x + rect2.width / rect.width;\n  this.uvs[5] = y + rect2.height / rect.height;\n  this.uvs[6] = x;\n  this.uvs[7] = y + rect2.height / rect.height; /// -----\n\n  x = rect2.x;\n  y = rect2.y;\n  this.vertices[0] = x;\n  this.vertices[1] = y;\n  this.vertices[2] = x + rect2.width;\n  this.vertices[3] = y;\n  this.vertices[4] = x + rect2.width;\n  this.vertices[5] = y + rect2.height;\n  this.vertices[6] = x;\n  this.vertices[7] = y + rect2.height;\n  this.upload();\n};\n/**\n * Binds the buffer and uploads the data\n */\n\n\nQuad.prototype.upload = function () {\n  var gl = this.gl; // TODO could probably be pushed into one upload!\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n  gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.vertices);\n  gl.bufferSubData(gl.ARRAY_BUFFER, 8 * 4, this.uvs);\n  gl.bufferSubData(gl.ARRAY_BUFFER, (8 + 8) * 4, this.colors);\n};\n\nmodule.exports = Quad;","map":{"version":3,"names":["Quad","gl","vertices","Float32Array","uvs","colors","indices","Uint16Array","vertexBuffer","createBuffer","indexBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","upload","prototype","constructor","map","rect","rect2","x","y","width","height","bufferSubData","module","exports"],"sources":["/home/reyden-martin/Documents/Tech2/HUB/Sony CSL/SONY-CSL-PROJECT/node_modules/react-piano-roll/node_modules/pixi.js/src/core/renderers/webgl/utils/Quad.js"],"sourcesContent":["/**\n * Helper class to create a quad\n * @class\n * @memberof PIXI\n * @param gl {WebGLRenderingContext} The gl context for this quad to use.\n */\nfunction Quad(gl)\n{\n    /*\n     * the current WebGL drawing context\n     *\n     * @member {WebGLRenderingContext}\n     */\n    this.gl = gl;\n\n//    this.textures = new TextureUvs();\n\n    /**\n     * An array of vertices\n     *\n     * @member {Float32Array}\n     */\n    this.vertices = new Float32Array([\n        0,0,\n        200,0,\n        200,200,\n        0,200\n    ]);\n\n    /**\n     * The Uvs of the quad\n     *\n     * @member {Float32Array}\n     */\n    this.uvs = new Float32Array([\n        0,0,\n        1,0,\n        1,1,\n        0,1\n    ]);\n\n//    var white = (0xFFFFFF >> 16) + (0xFFFFFF & 0xff00) + ((0xFFFFFF & 0xff) << 16) + (1 * 255 << 24);\n    //TODO convert this to a 32 unsigned int array\n    /**\n     * The color components of the triangles\n     *\n     * @member {Float32Array}\n     */\n    this.colors = new Float32Array([\n        1,1,1,1,\n        1,1,1,1,\n        1,1,1,1,\n        1,1,1,1\n    ]);\n\n    /*\n     * @member {Uint16Array} An array containing the indices of the vertices\n     */\n    this.indices = new Uint16Array([\n        0, 1, 2, 0, 3, 2\n    ]);\n\n    /*\n     * @member {WebGLBuffer} The vertex buffer\n     */\n    this.vertexBuffer = gl.createBuffer();\n\n    /*\n     * @member {WebGLBuffer} The index buffer\n     */\n    this.indexBuffer = gl.createBuffer();\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, (8 + 8 + 16) * 4, gl.DYNAMIC_DRAW);\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n\n    this.upload();\n}\n\nQuad.prototype.constructor = Quad;\n\n/**\n * Maps two Rectangle to the quad\n * @param rect {Rectangle} the first rectangle\n * @param rect2 {Rectangle} the second rectangle\n */\nQuad.prototype.map = function(rect, rect2)\n{\n    var x = 0; //rect2.x / rect.width;\n    var y = 0; //rect2.y / rect.height;\n\n    this.uvs[0] = x;\n    this.uvs[1] = y;\n\n    this.uvs[2] = x + rect2.width / rect.width;\n    this.uvs[3] = y;\n\n    this.uvs[4] = x + rect2.width / rect.width;\n    this.uvs[5] = y + rect2.height / rect.height;\n\n    this.uvs[6] = x;\n    this.uvs[7] = y + rect2.height / rect.height;\n\n    /// -----\n    x = rect2.x;\n    y = rect2.y;\n\n    this.vertices[0] = x;\n    this.vertices[1] = y;\n\n    this.vertices[2] = x + rect2.width;\n    this.vertices[3] = y;\n\n    this.vertices[4] = x + rect2.width;\n    this.vertices[5] = y + rect2.height;\n\n    this.vertices[6] = x;\n    this.vertices[7] = y + rect2.height;\n\n    this.upload();\n};\n\n/**\n * Binds the buffer and uploads the data\n */\nQuad.prototype.upload = function()\n{\n    var gl = this.gl;\n\n    // TODO could probably be pushed into one upload!\n    gl.bindBuffer( gl.ARRAY_BUFFER, this.vertexBuffer );\n\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.vertices);\n\n    gl.bufferSubData(gl.ARRAY_BUFFER, 8 * 4, this.uvs);\n\n    gl.bufferSubData(gl.ARRAY_BUFFER, (8 + 8) * 4, this.colors);\n};\n\nmodule.exports = Quad;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}