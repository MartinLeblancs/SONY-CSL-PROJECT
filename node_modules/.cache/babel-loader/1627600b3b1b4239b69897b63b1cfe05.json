{"ast":null,"code":"var core = require('../core');\n/**\n * A MovieClip is a simple way to display an animation depicted by a list of textures.\n *\n * ```js\n * var alienImages = [\"image_sequence_01.png\",\"image_sequence_02.png\",\"image_sequence_03.png\",\"image_sequence_04.png\"];\n * var textureArray = [];\n *\n * for (var i=0; i < 4; i++)\n * {\n *      var texture = PIXI.Texture.fromImage(alienImages[i]);\n *      textureArray.push(texture);\n * };\n *\n * var mc = new PIXI.MovieClip(textureArray);\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI.extras\n * @param textures {Texture[]} an array of {Texture} objects that make up the animation\n */\n\n\nfunction MovieClip(textures) {\n  core.Sprite.call(this, textures[0]);\n  /**\n   * @private\n   */\n\n  this._textures = textures;\n  /**\n   * The speed that the MovieClip will play at. Higher is faster, lower is slower\n   *\n   * @member {number}\n   * @default 1\n   */\n\n  this.animationSpeed = 1;\n  /**\n   * Whether or not the movie clip repeats after playing.\n   *\n   * @member {boolean}\n   * @default true\n   */\n\n  this.loop = true;\n  /**\n   * Function to call when a MovieClip finishes playing\n   *\n   * @method\n   * @memberof MovieClip#\n   */\n\n  this.onComplete = null;\n  /**\n   * Elapsed time since animation has been started, used internally to display current texture\n   *\n   * @member {number}\n   * @private\n   */\n\n  this._currentTime = 0;\n  /**\n   * Indicates if the MovieClip is currently playing\n   *\n   * @member {boolean}\n   * @readonly\n   */\n\n  this.playing = false;\n} // constructor\n\n\nMovieClip.prototype = Object.create(core.Sprite.prototype);\nMovieClip.prototype.constructor = MovieClip;\nmodule.exports = MovieClip;\nObject.defineProperties(MovieClip.prototype, {\n  /**\n   * totalFrames is the total number of frames in the MovieClip. This is the same as number of textures\n   * assigned to the MovieClip.\n   *\n   * @member {number}\n   * @memberof PIXI.MovieClip#\n   * @default 0\n   * @readonly\n   */\n  totalFrames: {\n    get: function get() {\n      return this._textures.length;\n    }\n  },\n\n  /**\n   * The array of textures used for this MovieClip\n   *\n   * @member {PIXI.Texture[]}\n   * @memberof PIXI.MovieClip#\n   *\n   */\n  textures: {\n    get: function get() {\n      return this._textures;\n    },\n    set: function set(value) {\n      this._textures = value;\n      this.texture = this._textures[Math.floor(this._currentTime) % this._textures.length];\n    }\n  },\n\n  /**\n  * The MovieClips current frame index\n  *\n  * @member {number}\n  * @memberof PIXI.MovieClip#\n  * @readonly\n  */\n  currentFrame: {\n    get: function get() {\n      return Math.floor(this._currentTime) % this._textures.length;\n    }\n  }\n});\n/**\n * Stops the MovieClip\n *\n */\n\nMovieClip.prototype.stop = function () {\n  if (!this.playing) {\n    return;\n  }\n\n  this.playing = false;\n  core.ticker.shared.remove(this.update, this);\n};\n/**\n * Plays the MovieClip\n *\n */\n\n\nMovieClip.prototype.play = function () {\n  if (this.playing) {\n    return;\n  }\n\n  this.playing = true;\n  core.ticker.shared.add(this.update, this);\n};\n/**\n * Stops the MovieClip and goes to a specific frame\n *\n * @param frameNumber {number} frame index to stop at\n */\n\n\nMovieClip.prototype.gotoAndStop = function (frameNumber) {\n  this.stop();\n  this._currentTime = frameNumber;\n  var round = Math.floor(this._currentTime);\n  this._texture = this._textures[round % this._textures.length];\n};\n/**\n * Goes to a specific frame and begins playing the MovieClip\n *\n * @param frameNumber {number} frame index to start at\n */\n\n\nMovieClip.prototype.gotoAndPlay = function (frameNumber) {\n  this._currentTime = frameNumber;\n  this.play();\n};\n/*\n * Updates the object transform for rendering\n * @private\n */\n\n\nMovieClip.prototype.update = function (deltaTime) {\n  this._currentTime += this.animationSpeed * deltaTime;\n  var floor = Math.floor(this._currentTime);\n\n  if (floor < 0) {\n    if (this.loop) {\n      this._texture = this._textures[this._textures.length - 1 + floor % this._textures.length];\n    } else {\n      this.gotoAndStop(0);\n\n      if (this.onComplete) {\n        this.onComplete();\n      }\n    }\n  } else if (this.loop || floor < this._textures.length) {\n    this._texture = this._textures[floor % this._textures.length];\n  } else if (floor >= this._textures.length) {\n    this.gotoAndStop(this.textures.length - 1);\n\n    if (this.onComplete) {\n      this.onComplete();\n    }\n  }\n};\n/*\n * Stops the MovieClip and destroys it\n *\n */\n\n\nMovieClip.prototype.destroy = function () {\n  this.stop();\n  core.Sprite.prototype.destroy.call(this);\n};\n/**\n * A short hand way of creating a movieclip from an array of frame ids\n *\n * @static\n * @param frames {string[]} the array of frames ids the movieclip will use as its texture frames\n */\n\n\nMovieClip.fromFrames = function (frames) {\n  var textures = [];\n\n  for (var i = 0; i < frames.length; ++i) {\n    textures.push(new core.Texture.fromFrame(frames[i]));\n  }\n\n  return new MovieClip(textures);\n};\n/**\n * A short hand way of creating a movieclip from an array of image ids\n *\n * @static\n * @param images {string[]} the array of image urls the movieclip will use as its texture frames\n */\n\n\nMovieClip.fromImages = function (images) {\n  var textures = [];\n\n  for (var i = 0; i < images.length; ++i) {\n    textures.push(new core.Texture.fromImage(images[i]));\n  }\n\n  return new MovieClip(textures);\n};","map":{"version":3,"names":["core","require","MovieClip","textures","Sprite","call","_textures","animationSpeed","loop","onComplete","_currentTime","playing","prototype","Object","create","constructor","module","exports","defineProperties","totalFrames","get","length","set","value","texture","Math","floor","currentFrame","stop","ticker","shared","remove","update","play","add","gotoAndStop","frameNumber","round","_texture","gotoAndPlay","deltaTime","destroy","fromFrames","frames","i","push","Texture","fromFrame","fromImages","images","fromImage"],"sources":["/home/reyden-martin/Documents/Tech2/HUB/Sony CSL/SONY-CSL-PROJECT/node_modules/react-piano-roll/node_modules/pixi.js/src/extras/MovieClip.js"],"sourcesContent":["var core = require('../core');\n\n/**\n * A MovieClip is a simple way to display an animation depicted by a list of textures.\n *\n * ```js\n * var alienImages = [\"image_sequence_01.png\",\"image_sequence_02.png\",\"image_sequence_03.png\",\"image_sequence_04.png\"];\n * var textureArray = [];\n *\n * for (var i=0; i < 4; i++)\n * {\n *      var texture = PIXI.Texture.fromImage(alienImages[i]);\n *      textureArray.push(texture);\n * };\n *\n * var mc = new PIXI.MovieClip(textureArray);\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI.extras\n * @param textures {Texture[]} an array of {Texture} objects that make up the animation\n */\nfunction MovieClip(textures)\n{\n    core.Sprite.call(this, textures[0]);\n\n    /**\n     * @private\n     */\n    this._textures = textures;\n\n    /**\n     * The speed that the MovieClip will play at. Higher is faster, lower is slower\n     *\n     * @member {number}\n     * @default 1\n     */\n    this.animationSpeed = 1;\n\n    /**\n     * Whether or not the movie clip repeats after playing.\n     *\n     * @member {boolean}\n     * @default true\n     */\n    this.loop = true;\n\n    /**\n     * Function to call when a MovieClip finishes playing\n     *\n     * @method\n     * @memberof MovieClip#\n     */\n    this.onComplete = null;\n\n    /**\n     * Elapsed time since animation has been started, used internally to display current texture\n     *\n     * @member {number}\n     * @private\n     */\n    this._currentTime = 0;\n\n    /**\n     * Indicates if the MovieClip is currently playing\n     *\n     * @member {boolean}\n     * @readonly\n     */\n    this.playing = false;\n}\n\n// constructor\nMovieClip.prototype = Object.create(core.Sprite.prototype);\nMovieClip.prototype.constructor = MovieClip;\nmodule.exports = MovieClip;\n\nObject.defineProperties(MovieClip.prototype, {\n    /**\n     * totalFrames is the total number of frames in the MovieClip. This is the same as number of textures\n     * assigned to the MovieClip.\n     *\n     * @member {number}\n     * @memberof PIXI.MovieClip#\n     * @default 0\n     * @readonly\n     */\n    totalFrames: {\n        get: function()\n        {\n            return this._textures.length;\n        }\n    },\n\n    /**\n     * The array of textures used for this MovieClip\n     *\n     * @member {PIXI.Texture[]}\n     * @memberof PIXI.MovieClip#\n     *\n     */\n    textures: {\n        get: function ()\n        {\n            return this._textures;\n        },\n        set: function (value)\n        {\n            this._textures = value;\n\n            this.texture = this._textures[Math.floor(this._currentTime) % this._textures.length];\n        }\n    },\n\n    /**\n    * The MovieClips current frame index\n    *\n    * @member {number}\n    * @memberof PIXI.MovieClip#\n    * @readonly\n    */\n    currentFrame: {\n        get: function ()\n        {\n            return Math.floor(this._currentTime) % this._textures.length;\n        }\n    }\n\n});\n\n/**\n * Stops the MovieClip\n *\n */\nMovieClip.prototype.stop = function ()\n{\n    if(!this.playing)\n    {\n        return;\n    }\n\n    this.playing = false;\n    core.ticker.shared.remove(this.update, this);\n};\n\n/**\n * Plays the MovieClip\n *\n */\nMovieClip.prototype.play = function ()\n{\n    if(this.playing)\n    {\n        return;\n    }\n\n    this.playing = true;\n    core.ticker.shared.add(this.update, this);\n};\n\n/**\n * Stops the MovieClip and goes to a specific frame\n *\n * @param frameNumber {number} frame index to stop at\n */\nMovieClip.prototype.gotoAndStop = function (frameNumber)\n{\n    this.stop();\n\n    this._currentTime = frameNumber;\n\n    var round = Math.floor(this._currentTime);\n    this._texture = this._textures[round % this._textures.length];\n};\n\n/**\n * Goes to a specific frame and begins playing the MovieClip\n *\n * @param frameNumber {number} frame index to start at\n */\nMovieClip.prototype.gotoAndPlay = function (frameNumber)\n{\n    this._currentTime = frameNumber;\n    this.play();\n};\n\n/*\n * Updates the object transform for rendering\n * @private\n */\nMovieClip.prototype.update = function (deltaTime)\n{\n\n    this._currentTime += this.animationSpeed * deltaTime;\n\n    var floor = Math.floor(this._currentTime);\n\n    if (floor < 0)\n    {\n        if (this.loop)\n        {\n            this._texture = this._textures[this._textures.length - 1 + floor % this._textures.length];\n        }\n        else\n        {\n            this.gotoAndStop(0);\n\n            if (this.onComplete)\n            {\n                this.onComplete();\n            }\n        }\n    }\n    else if (this.loop || floor < this._textures.length)\n    {\n        this._texture = this._textures[floor % this._textures.length];\n    }\n    else if (floor >= this._textures.length)\n    {\n        this.gotoAndStop(this.textures.length - 1);\n\n        if (this.onComplete)\n        {\n            this.onComplete();\n        }\n    }\n};\n\n/*\n * Stops the MovieClip and destroys it\n *\n */\nMovieClip.prototype.destroy = function ( )\n{\n    this.stop();\n    core.Sprite.prototype.destroy.call(this);\n};\n\n/**\n * A short hand way of creating a movieclip from an array of frame ids\n *\n * @static\n * @param frames {string[]} the array of frames ids the movieclip will use as its texture frames\n */\nMovieClip.fromFrames = function (frames)\n{\n    var textures = [];\n\n    for (var i = 0; i < frames.length; ++i)\n    {\n        textures.push(new core.Texture.fromFrame(frames[i]));\n    }\n\n    return new MovieClip(textures);\n};\n\n/**\n * A short hand way of creating a movieclip from an array of image ids\n *\n * @static\n * @param images {string[]} the array of image urls the movieclip will use as its texture frames\n */\nMovieClip.fromImages = function (images)\n{\n    var textures = [];\n\n    for (var i = 0; i < images.length; ++i)\n    {\n        textures.push(new core.Texture.fromImage(images[i]));\n    }\n\n    return new MovieClip(textures);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}