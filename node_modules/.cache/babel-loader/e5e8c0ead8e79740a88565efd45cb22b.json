{"ast":null,"code":"var core = require('../../core'); // @see https://github.com/substack/brfs/issues/25\n\n\nvar fs = require('fs');\n/**\n * An RGB Split Filter.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\n\n\nfunction RGBSplitFilter() {\n  core.AbstractFilter.call(this, // vertex shader\n  null, // fragment shader\n  fs.readFileSync(__dirname + '/rgbSplit.frag', 'utf8'), // custom uniforms\n  {\n    red: {\n      type: 'v2',\n      value: {\n        x: 20,\n        y: 20\n      }\n    },\n    green: {\n      type: 'v2',\n      value: {\n        x: -20,\n        y: 20\n      }\n    },\n    blue: {\n      type: 'v2',\n      value: {\n        x: 20,\n        y: -20\n      }\n    },\n    dimensions: {\n      type: '4fv',\n      value: [0, 0, 0, 0]\n    }\n  });\n}\n\nRGBSplitFilter.prototype = Object.create(core.AbstractFilter.prototype);\nRGBSplitFilter.prototype.constructor = RGBSplitFilter;\nmodule.exports = RGBSplitFilter;\nObject.defineProperties(RGBSplitFilter.prototype, {\n  /**\n   * Red channel offset.\n   *\n   * @member {Point}\n   * @memberof RGBSplitFilter#\n   */\n  red: {\n    get: function () {\n      return this.uniforms.red.value;\n    },\n    set: function (value) {\n      this.uniforms.red.value = value;\n    }\n  },\n\n  /**\n   * Green channel offset.\n   *\n   * @member {Point}\n   * @memberof RGBSplitFilter#\n   */\n  green: {\n    get: function () {\n      return this.uniforms.green.value;\n    },\n    set: function (value) {\n      this.uniforms.green.value = value;\n    }\n  },\n\n  /**\n   * Blue offset.\n   *\n   * @member {Point}\n   * @memberof RGBSplitFilter#\n   */\n  blue: {\n    get: function () {\n      return this.uniforms.blue.value;\n    },\n    set: function (value) {\n      this.uniforms.blue.value = value;\n    }\n  }\n});","map":{"version":3,"names":["core","require","fs","RGBSplitFilter","AbstractFilter","call","readFileSync","__dirname","red","type","value","x","y","green","blue","dimensions","prototype","Object","create","constructor","module","exports","defineProperties","get","uniforms","set"],"sources":["/home/reyden-martin/Documents/Tech2/HUB/Sony CSL/SONY-CSL-PROJECT/node_modules/react-piano-roll/node_modules/pixi.js/src/filters/rgb/RGBSplitFilter.js"],"sourcesContent":["var core = require('../../core');\n// @see https://github.com/substack/brfs/issues/25\nvar fs = require('fs');\n\n/**\n * An RGB Split Filter.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n */\nfunction RGBSplitFilter()\n{\n    core.AbstractFilter.call(this,\n        // vertex shader\n        null,\n        // fragment shader\n        fs.readFileSync(__dirname + '/rgbSplit.frag', 'utf8'),\n        // custom uniforms\n        {\n            red:        { type: 'v2', value: { x: 20, y: 20 } },\n            green:      { type: 'v2', value: { x: -20, y: 20 } },\n            blue:       { type: 'v2', value: { x: 20, y: -20 } },\n            dimensions: { type: '4fv', value: [0, 0, 0, 0] }\n        }\n    );\n}\n\nRGBSplitFilter.prototype = Object.create(core.AbstractFilter.prototype);\nRGBSplitFilter.prototype.constructor = RGBSplitFilter;\nmodule.exports = RGBSplitFilter;\n\nObject.defineProperties(RGBSplitFilter.prototype, {\n    /**\n     * Red channel offset.\n     *\n     * @member {Point}\n     * @memberof RGBSplitFilter#\n     */\n    red: {\n        get: function ()\n        {\n            return this.uniforms.red.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.red.value = value;\n        }\n    },\n\n    /**\n     * Green channel offset.\n     *\n     * @member {Point}\n     * @memberof RGBSplitFilter#\n     */\n    green: {\n        get: function ()\n        {\n            return this.uniforms.green.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.green.value = value;\n        }\n    },\n\n    /**\n     * Blue offset.\n     *\n     * @member {Point}\n     * @memberof RGBSplitFilter#\n     */\n    blue: {\n        get: function ()\n        {\n            return this.uniforms.blue.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.blue.value = value;\n        }\n    }\n});\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAAlB,C,CACA;;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,cAAT,GACA;EACIH,IAAI,CAACI,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,EACI;EACA,IAFJ,EAGI;EACAH,EAAE,CAACI,YAAH,CAAgBC,SAAS,GAAG,gBAA5B,EAA8C,MAA9C,CAJJ,EAKI;EACA;IACIC,GAAG,EAAS;MAAEC,IAAI,EAAE,IAAR;MAAcC,KAAK,EAAE;QAAEC,CAAC,EAAE,EAAL;QAASC,CAAC,EAAE;MAAZ;IAArB,CADhB;IAEIC,KAAK,EAAO;MAAEJ,IAAI,EAAE,IAAR;MAAcC,KAAK,EAAE;QAAEC,CAAC,EAAE,CAAC,EAAN;QAAUC,CAAC,EAAE;MAAb;IAArB,CAFhB;IAGIE,IAAI,EAAQ;MAAEL,IAAI,EAAE,IAAR;MAAcC,KAAK,EAAE;QAAEC,CAAC,EAAE,EAAL;QAASC,CAAC,EAAE,CAAC;MAAb;IAArB,CAHhB;IAIIG,UAAU,EAAE;MAAEN,IAAI,EAAE,KAAR;MAAeC,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;IAAtB;EAJhB,CANJ;AAaH;;AAEDP,cAAc,CAACa,SAAf,GAA2BC,MAAM,CAACC,MAAP,CAAclB,IAAI,CAACI,cAAL,CAAoBY,SAAlC,CAA3B;AACAb,cAAc,CAACa,SAAf,CAAyBG,WAAzB,GAAuChB,cAAvC;AACAiB,MAAM,CAACC,OAAP,GAAiBlB,cAAjB;AAEAc,MAAM,CAACK,gBAAP,CAAwBnB,cAAc,CAACa,SAAvC,EAAkD;EAC9C;AACJ;AACA;AACA;AACA;AACA;EACIR,GAAG,EAAE;IACDe,GAAG,EAAE,YACL;MACI,OAAO,KAAKC,QAAL,CAAchB,GAAd,CAAkBE,KAAzB;IACH,CAJA;IAKDe,GAAG,EAAE,UAAUf,KAAV,EACL;MACI,KAAKc,QAAL,CAAchB,GAAd,CAAkBE,KAAlB,GAA0BA,KAA1B;IACH;EARA,CAPyC;;EAkB9C;AACJ;AACA;AACA;AACA;AACA;EACIG,KAAK,EAAE;IACHU,GAAG,EAAE,YACL;MACI,OAAO,KAAKC,QAAL,CAAcX,KAAd,CAAoBH,KAA3B;IACH,CAJE;IAKHe,GAAG,EAAE,UAAUf,KAAV,EACL;MACI,KAAKc,QAAL,CAAcX,KAAd,CAAoBH,KAApB,GAA4BA,KAA5B;IACH;EARE,CAxBuC;;EAmC9C;AACJ;AACA;AACA;AACA;AACA;EACII,IAAI,EAAE;IACFS,GAAG,EAAE,YACL;MACI,OAAO,KAAKC,QAAL,CAAcV,IAAd,CAAmBJ,KAA1B;IACH,CAJC;IAKFe,GAAG,EAAE,UAAUf,KAAV,EACL;MACI,KAAKc,QAAL,CAAcV,IAAd,CAAmBJ,KAAnB,GAA2BA,KAA3B;IACH;EARC;AAzCwC,CAAlD"},"metadata":{},"sourceType":"script"}