{"ast":null,"code":"var math = require('../../../math'),\n    utils = require('../../../utils'),\n    CONST = require('../../../const'),\n    //StencilManager = require('../managers/StencilManager'),\nStencilMaskStack = require('./StencilMaskStack');\n/**\n * @author Mat Groves http://matgroves.com/ @Doormat23\n */\n\n/**\n * @class\n * @memberof PIXI\n * @param gl {WebGLRenderingContext} the current WebGL drawing context\n * @param width {number} the horizontal range of the filter\n * @param height {number} the vertical range of the filter\n * @param scaleMode {number} See {{#crossLink \"PIXI/scaleModes:property\"}}PIXI.scaleModes{{/crossLink}} for possible values\n * @param resolution {number} the current resolution\n * @param root {boolean} Whether this object is the root element or not\n */\n\n\nvar RenderTarget = function RenderTarget(gl, width, height, scaleMode, resolution, root) {\n  //TODO Resolution could go here ( eg low res blurs )\n\n  /**\n   * The current WebGL drawing context\n   * @member {WebGLRenderingContext}\n   */\n  this.gl = gl; // next time to create a frame buffer and texture\n\n  /**\n   * A frame buffer\n   * @member {WebGLFrameBuffer}\n   */\n\n  this.frameBuffer = null;\n  /**\n   * @member {Texture}\n   */\n\n  this.texture = null;\n  /**\n   * The size of the object as a rectangle\n   * @member {Rectangle}\n   */\n\n  this.size = new math.Rectangle(0, 0, 1, 1);\n  /**\n   * The current resolution\n   * @member {number}\n   */\n\n  this.resolution = resolution || CONST.RESOLUTION;\n  /**\n   * The projection matrix\n   * @member {Matrix}\n   */\n\n  this.projectionMatrix = new math.Matrix();\n  /**\n   * The object's transform\n   * @member {Matrix}\n   */\n\n  this.transform = null;\n  /**\n   *\n   * @member {Rectangle}\n   */\n\n  this.frame = null;\n  /**\n   * The stencil buffer stores masking data for the render target\n   * @member {WebGLRenderBuffer}\n   */\n\n  this.stencilBuffer = null;\n  /**\n   * The data structure for the stencil masks\n   * @member {StencilMaskStack}\n   */\n\n  this.stencilMaskStack = new StencilMaskStack();\n  /**\n   * Stores filter data for the render target\n   * @member {Array}\n   */\n\n  this.filterStack = [{\n    renderTarget: this,\n    filter: [],\n    bounds: this.size\n  }];\n  /**\n   * The scale mode\n   * @member {number}\n   * @default CONST.SCALE_MODES.DEFAULT\n   */\n\n  this.scaleMode = scaleMode || CONST.SCALE_MODES.DEFAULT;\n  /**\n   * Whether this object is the root element or not\n   * @member {boolean}\n   */\n\n  this.root = root;\n\n  if (!this.root) {\n    // this.flipY = true;\n    this.frameBuffer = gl.createFramebuffer();\n    /*\n        A frame buffer needs a target to render to..\n        create a texture and bind it attach it to the framebuffer..\n     */\n\n    this.texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, this.texture); // set the scale properties of the texture..\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, scaleMode === CONST.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, scaleMode === CONST.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST); // check to see if the texture is a power of two!\n\n    var isPowerOfTwo = utils.isPowerOfTwo(width, height); //TODO for 99% of use cases if a texture is power of two we should tile the texture...\n\n    if (!isPowerOfTwo) {\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    } else {\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);\n  }\n\n  this.resize(width, height);\n};\n\nRenderTarget.prototype.constructor = RenderTarget;\nmodule.exports = RenderTarget;\n/**\n* Clears the filter texture.\n*\n*/\n\nRenderTarget.prototype.clear = function (bind) {\n  var gl = this.gl;\n\n  if (bind) {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n  }\n\n  gl.clearColor(0, 0, 0, 0);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n};\n/**\n* Binds the stencil buffer.\n*\n*/\n\n\nRenderTarget.prototype.attachStencilBuffer = function () {\n  if (this.stencilBuffer) {\n    return;\n  }\n  /*\n      The stencil buffer is used for masking in pixi\n      lets create one and then add attach it to the framebuffer..\n   */\n\n\n  if (!this.root) {\n    var gl = this.gl;\n    this.stencilBuffer = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencilBuffer);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.stencilBuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, this.size.width * this.resolution, this.size.height * this.resolution);\n  }\n};\n/**\n* Binds the buffers and initialises the viewport.\n*\n*/\n\n\nRenderTarget.prototype.activate = function () {\n  //TOOD refactor usage of frame..\n  var gl = this.gl;\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n  var projectionFrame = this.frame || this.size; // TODO add a dirty flag to this of a setter for the frame?\n\n  this.calculateProjection(projectionFrame);\n\n  if (this.transform) {\n    this.projectionMatrix.append(this.transform);\n  }\n\n  gl.viewport(0, 0, projectionFrame.width * this.resolution, projectionFrame.height * this.resolution);\n};\n/**\n* Updates the projection matrix based on a projection frame (which is a rectangle)\n*\n*/\n\n\nRenderTarget.prototype.calculateProjection = function (projectionFrame) {\n  var pm = this.projectionMatrix;\n  pm.identity();\n\n  if (!this.root) {\n    pm.a = 1 / projectionFrame.width * 2;\n    pm.d = 1 / projectionFrame.height * 2;\n    pm.tx = -1 - projectionFrame.x * pm.a;\n    pm.ty = -1 - projectionFrame.y * pm.d;\n  } else {\n    pm.a = 1 / projectionFrame.width * 2;\n    pm.d = -1 / projectionFrame.height * 2;\n    pm.tx = -1 - projectionFrame.x * pm.a;\n    pm.ty = 1 - projectionFrame.y * pm.d;\n  }\n};\n/**\n * Resizes the texture to the specified width and height\n *\n * @param width {Number} the new width of the texture\n * @param height {Number} the new height of the texture\n */\n\n\nRenderTarget.prototype.resize = function (width, height) {\n  width = width | 0;\n  height = height | 0;\n\n  if (this.size.width === width && this.size.height === height) {\n    return;\n  }\n\n  this.size.width = width;\n  this.size.height = height;\n\n  if (!this.root) {\n    var gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width * this.resolution, height * this.resolution, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n    if (this.stencilBuffer) {\n      // update the stencil buffer width and height\n      gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencilBuffer);\n      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width * this.resolution, height * this.resolution);\n    }\n  }\n\n  var projectionFrame = this.frame || this.size;\n  this.calculateProjection(projectionFrame);\n};\n/**\n * Destroys the render target.\n *\n */\n\n\nRenderTarget.prototype.destroy = function () {\n  var gl = this.gl;\n  gl.deleteFramebuffer(this.frameBuffer);\n  gl.deleteTexture(this.texture);\n  this.frameBuffer = null;\n  this.texture = null;\n};","map":{"version":3,"names":["math","require","utils","CONST","StencilMaskStack","RenderTarget","gl","width","height","scaleMode","resolution","root","frameBuffer","texture","size","Rectangle","RESOLUTION","projectionMatrix","Matrix","transform","frame","stencilBuffer","stencilMaskStack","filterStack","renderTarget","filter","bounds","SCALE_MODES","DEFAULT","createFramebuffer","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","LINEAR","NEAREST","TEXTURE_MIN_FILTER","isPowerOfTwo","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","REPEAT","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","resize","prototype","constructor","module","exports","clear","bind","clearColor","COLOR_BUFFER_BIT","attachStencilBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT","renderbufferStorage","DEPTH_STENCIL","activate","projectionFrame","calculateProjection","append","viewport","pm","identity","a","d","tx","x","ty","y","texImage2D","RGBA","UNSIGNED_BYTE","destroy","deleteFramebuffer","deleteTexture"],"sources":["/home/reyden-martin/Documents/Tech2/HUB/Sony CSL/SONY-CSL-PROJECT/node_modules/react-piano-roll/node_modules/pixi.js/src/core/renderers/webgl/utils/RenderTarget.js"],"sourcesContent":["var math = require('../../../math'),\n    utils = require('../../../utils'),\n    CONST = require('../../../const'),\n    //StencilManager = require('../managers/StencilManager'),\n    StencilMaskStack = require('./StencilMaskStack');\n\n/**\n * @author Mat Groves http://matgroves.com/ @Doormat23\n */\n\n/**\n * @class\n * @memberof PIXI\n * @param gl {WebGLRenderingContext} the current WebGL drawing context\n * @param width {number} the horizontal range of the filter\n * @param height {number} the vertical range of the filter\n * @param scaleMode {number} See {{#crossLink \"PIXI/scaleModes:property\"}}PIXI.scaleModes{{/crossLink}} for possible values\n * @param resolution {number} the current resolution\n * @param root {boolean} Whether this object is the root element or not\n */\nvar RenderTarget = function(gl, width, height, scaleMode, resolution, root)\n{\n    //TODO Resolution could go here ( eg low res blurs )\n\n    /**\n     * The current WebGL drawing context\n     * @member {WebGLRenderingContext}\n     */\n    this.gl = gl;\n\n    // next time to create a frame buffer and texture\n\n    /**\n     * A frame buffer\n     * @member {WebGLFrameBuffer}\n     */\n    this.frameBuffer = null;\n\n    /**\n     * @member {Texture}\n     */\n    this.texture = null;\n\n    /**\n     * The size of the object as a rectangle\n     * @member {Rectangle}\n     */\n    this.size = new math.Rectangle(0, 0, 1, 1);\n\n    /**\n     * The current resolution\n     * @member {number}\n     */\n    this.resolution = resolution || CONST.RESOLUTION;\n\n    /**\n     * The projection matrix\n     * @member {Matrix}\n     */\n    this.projectionMatrix = new math.Matrix();\n\n    /**\n     * The object's transform\n     * @member {Matrix}\n     */\n    this.transform = null;\n\n    /**\n     *\n     * @member {Rectangle}\n     */\n    this.frame = null;\n\n    /**\n     * The stencil buffer stores masking data for the render target\n     * @member {WebGLRenderBuffer}\n     */\n    this.stencilBuffer = null;\n\n    /**\n     * The data structure for the stencil masks\n     * @member {StencilMaskStack}\n     */\n    this.stencilMaskStack = new StencilMaskStack();\n\n    /**\n     * Stores filter data for the render target\n     * @member {Array}\n     */\n    this.filterStack = [\n        {\n            renderTarget:this,\n            filter:[],\n            bounds:this.size\n        }\n    ];\n\n\n    /**\n     * The scale mode\n     * @member {number}\n     * @default CONST.SCALE_MODES.DEFAULT\n     */\n    this.scaleMode = scaleMode || CONST.SCALE_MODES.DEFAULT;\n\n    /**\n     * Whether this object is the root element or not\n     * @member {boolean}\n     */\n    this.root = root;\n\n    if (!this.root)\n    {\n       // this.flipY = true;\n        this.frameBuffer = gl.createFramebuffer();\n\n        /*\n            A frame buffer needs a target to render to..\n            create a texture and bind it attach it to the framebuffer..\n         */\n\n        this.texture = gl.createTexture();\n\n        gl.bindTexture(gl.TEXTURE_2D,  this.texture);\n\n        // set the scale properties of the texture..\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, scaleMode === CONST.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, scaleMode === CONST.SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n\n        // check to see if the texture is a power of two!\n        var isPowerOfTwo = utils.isPowerOfTwo(width, height);\n\n        //TODO for 99% of use cases if a texture is power of two we should tile the texture...\n         if (!isPowerOfTwo)\n        {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        }\n        else\n        {\n\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n        }\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer );\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);\n    }\n\n\n    this.resize(width, height);\n};\n\nRenderTarget.prototype.constructor = RenderTarget;\nmodule.exports = RenderTarget;\n\n/**\n* Clears the filter texture.\n*\n*/\nRenderTarget.prototype.clear = function(bind)\n{\n    var gl = this.gl;\n    if(bind)\n    {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n    }\n\n    gl.clearColor(0,0,0,0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n};\n\n/**\n* Binds the stencil buffer.\n*\n*/\nRenderTarget.prototype.attachStencilBuffer = function()\n{\n\n    if ( this.stencilBuffer )\n    {\n        return;\n    }\n\n    /*\n        The stencil buffer is used for masking in pixi\n        lets create one and then add attach it to the framebuffer..\n     */\n    if (!this.root)\n    {\n        var gl = this.gl;\n\n        this.stencilBuffer = gl.createRenderbuffer();\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencilBuffer);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.stencilBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL,  this.size.width * this.resolution  , this.size.height * this.resolution );\n    }\n};\n\n/**\n* Binds the buffers and initialises the viewport.\n*\n*/\nRenderTarget.prototype.activate = function()\n{\n    //TOOD refactor usage of frame..\n    var gl = this.gl;\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n\n    var projectionFrame = this.frame || this.size;\n\n    // TODO add a dirty flag to this of a setter for the frame?\n    this.calculateProjection( projectionFrame );\n\n    if(this.transform)\n    {\n        this.projectionMatrix.append(this.transform);\n    }\n\n    gl.viewport(0,0, projectionFrame.width * this.resolution, projectionFrame.height * this.resolution);\n};\n\n/**\n* Updates the projection matrix based on a projection frame (which is a rectangle)\n*\n*/\nRenderTarget.prototype.calculateProjection = function( projectionFrame )\n{\n    var pm = this.projectionMatrix;\n\n    pm.identity();\n\n    if (!this.root)\n    {\n        pm.a = 1 / projectionFrame.width*2;\n        pm.d = 1 / projectionFrame.height*2;\n\n        pm.tx = -1 - projectionFrame.x * pm.a;\n        pm.ty = -1 - projectionFrame.y * pm.d;\n    }\n    else\n    {\n        pm.a = 1 / projectionFrame.width*2;\n        pm.d = -1 / projectionFrame.height*2;\n\n        pm.tx = -1 - projectionFrame.x * pm.a;\n        pm.ty = 1 - projectionFrame.y * pm.d;\n    }\n};\n\n\n/**\n * Resizes the texture to the specified width and height\n *\n * @param width {Number} the new width of the texture\n * @param height {Number} the new height of the texture\n */\nRenderTarget.prototype.resize = function(width, height)\n{\n    width = width | 0;\n    height = height | 0;\n\n    if (this.size.width === width && this.size.height === height) {\n        return;\n    }\n\n    this.size.width = width;\n    this.size.height = height;\n\n    if (!this.root)\n    {\n        var gl = this.gl;\n\n        gl.bindTexture(gl.TEXTURE_2D,  this.texture);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA,  width * this.resolution, height * this.resolution , 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n        if (this.stencilBuffer )\n        {\n            // update the stencil buffer width and height\n            gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencilBuffer);\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL,  width * this.resolution, height * this.resolution );\n        }\n    }\n\n    var projectionFrame = this.frame || this.size;\n\n    this.calculateProjection( projectionFrame );\n};\n\n/**\n * Destroys the render target.\n *\n */\nRenderTarget.prototype.destroy = function()\n{\n    var gl = this.gl;\n    gl.deleteFramebuffer( this.frameBuffer );\n    gl.deleteTexture( this.texture );\n\n    this.frameBuffer = null;\n    this.texture = null;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}