{"ast":null,"code":"var core = require('../core');\n/**\n * Holds all information related to an Interaction event\n *\n * @class\n * @memberof PIXI.interaction\n */\n\n\nfunction InteractionData() {\n  /**\n   * This point stores the global coords of where the touch/mouse event happened\n   *\n   * @member {Point}\n   */\n  this.global = new core.Point();\n  /**\n   * The target Sprite that was interacted with\n   *\n   * @member {Sprite}\n   */\n\n  this.target = null;\n  /**\n   * When passed to an event handler, this will be the original DOM Event that was captured\n   *\n   * @member {Event}\n   */\n\n  this.originalEvent = null;\n}\n\nInteractionData.prototype.constructor = InteractionData;\nmodule.exports = InteractionData;\n/**\n * This will return the local coordinates of the specified displayObject for this InteractionData\n *\n * @param displayObject {DisplayObject} The DisplayObject that you would like the local coords off\n * @param [point] {Point} A Point object in which to store the value, optional (otherwise will create a new point)\n * param [globalPos] {Point} A Point object containing your custom global coords, optional (otherwise will use the current global coords)\n * @return {Point} A point containing the coordinates of the InteractionData position relative to the DisplayObject\n */\n\nInteractionData.prototype.getLocalPosition = function (displayObject, point, globalPos) {\n  var worldTransform = displayObject.worldTransform;\n  var global = globalPos ? globalPos : this.global; // do a cheeky transform to get the mouse coords;\n\n  var a00 = worldTransform.a,\n      a01 = worldTransform.c,\n      a02 = worldTransform.tx,\n      a10 = worldTransform.b,\n      a11 = worldTransform.d,\n      a12 = worldTransform.ty,\n      id = 1 / (a00 * a11 + a01 * -a10);\n  point = point || new core.Point();\n  point.x = a11 * id * global.x + -a01 * id * global.x + (a12 * a01 - a02 * a11) * id;\n  point.y = a00 * id * global.y + -a10 * id * global.y + (-a12 * a00 + a02 * a10) * id; // set the mouse coords...\n\n  return point;\n};","map":{"version":3,"names":["core","require","InteractionData","global","Point","target","originalEvent","prototype","constructor","module","exports","getLocalPosition","displayObject","point","globalPos","worldTransform","a00","a","a01","c","a02","tx","a10","b","a11","d","a12","ty","id","x","y"],"sources":["/home/reyden-martin/Documents/Tech2/HUB/Sony CSL/SONY-CSL-PROJECT/node_modules/react-piano-roll/node_modules/pixi.js/src/interaction/InteractionData.js"],"sourcesContent":["var core = require('../core');\n\n/**\n * Holds all information related to an Interaction event\n *\n * @class\n * @memberof PIXI.interaction\n */\nfunction InteractionData()\n{\n    /**\n     * This point stores the global coords of where the touch/mouse event happened\n     *\n     * @member {Point}\n     */\n    this.global = new core.Point();\n\n    /**\n     * The target Sprite that was interacted with\n     *\n     * @member {Sprite}\n     */\n    this.target = null;\n\n    /**\n     * When passed to an event handler, this will be the original DOM Event that was captured\n     *\n     * @member {Event}\n     */\n    this.originalEvent = null;\n}\n\nInteractionData.prototype.constructor = InteractionData;\nmodule.exports = InteractionData;\n\n/**\n * This will return the local coordinates of the specified displayObject for this InteractionData\n *\n * @param displayObject {DisplayObject} The DisplayObject that you would like the local coords off\n * @param [point] {Point} A Point object in which to store the value, optional (otherwise will create a new point)\n * param [globalPos] {Point} A Point object containing your custom global coords, optional (otherwise will use the current global coords)\n * @return {Point} A point containing the coordinates of the InteractionData position relative to the DisplayObject\n */\nInteractionData.prototype.getLocalPosition = function (displayObject, point, globalPos)\n{\n    var worldTransform = displayObject.worldTransform;\n    var global = globalPos ? globalPos : this.global;\n\n    // do a cheeky transform to get the mouse coords;\n    var a00 = worldTransform.a, a01 = worldTransform.c, a02 = worldTransform.tx,\n        a10 = worldTransform.b, a11 = worldTransform.d, a12 = worldTransform.ty,\n        id = 1 / (a00 * a11 + a01 * -a10);\n\n    point = point || new core.Point();\n\n    point.x = a11 * id * global.x + -a01 * id * global.x + (a12 * a01 - a02 * a11) * id;\n    point.y = a00 * id * global.y + -a10 * id * global.y + (-a12 * a00 + a02 * a10) * id;\n\n    // set the mouse coords...\n    return point;\n};\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,eAAT,GACA;EACI;AACJ;AACA;AACA;AACA;EACI,KAAKC,MAAL,GAAc,IAAIH,IAAI,CAACI,KAAT,EAAd;EAEA;AACJ;AACA;AACA;AACA;;EACI,KAAKC,MAAL,GAAc,IAAd;EAEA;AACJ;AACA;AACA;AACA;;EACI,KAAKC,aAAL,GAAqB,IAArB;AACH;;AAEDJ,eAAe,CAACK,SAAhB,CAA0BC,WAA1B,GAAwCN,eAAxC;AACAO,MAAM,CAACC,OAAP,GAAiBR,eAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,eAAe,CAACK,SAAhB,CAA0BI,gBAA1B,GAA6C,UAAUC,aAAV,EAAyBC,KAAzB,EAAgCC,SAAhC,EAC7C;EACI,IAAIC,cAAc,GAAGH,aAAa,CAACG,cAAnC;EACA,IAAIZ,MAAM,GAAGW,SAAS,GAAGA,SAAH,GAAe,KAAKX,MAA1C,CAFJ,CAII;;EACA,IAAIa,GAAG,GAAGD,cAAc,CAACE,CAAzB;EAAA,IAA4BC,GAAG,GAAGH,cAAc,CAACI,CAAjD;EAAA,IAAoDC,GAAG,GAAGL,cAAc,CAACM,EAAzE;EAAA,IACIC,GAAG,GAAGP,cAAc,CAACQ,CADzB;EAAA,IAC4BC,GAAG,GAAGT,cAAc,CAACU,CADjD;EAAA,IACoDC,GAAG,GAAGX,cAAc,CAACY,EADzE;EAAA,IAEIC,EAAE,GAAG,KAAKZ,GAAG,GAAGQ,GAAN,GAAYN,GAAG,GAAG,CAACI,GAAxB,CAFT;EAIAT,KAAK,GAAGA,KAAK,IAAI,IAAIb,IAAI,CAACI,KAAT,EAAjB;EAEAS,KAAK,CAACgB,CAAN,GAAUL,GAAG,GAAGI,EAAN,GAAWzB,MAAM,CAAC0B,CAAlB,GAAsB,CAACX,GAAD,GAAOU,EAAP,GAAYzB,MAAM,CAAC0B,CAAzC,GAA6C,CAACH,GAAG,GAAGR,GAAN,GAAYE,GAAG,GAAGI,GAAnB,IAA0BI,EAAjF;EACAf,KAAK,CAACiB,CAAN,GAAUd,GAAG,GAAGY,EAAN,GAAWzB,MAAM,CAAC2B,CAAlB,GAAsB,CAACR,GAAD,GAAOM,EAAP,GAAYzB,MAAM,CAAC2B,CAAzC,GAA6C,CAAC,CAACJ,GAAD,GAAOV,GAAP,GAAaI,GAAG,GAAGE,GAApB,IAA2BM,EAAlF,CAZJ,CAcI;;EACA,OAAOf,KAAP;AACH,CAjBD"},"metadata":{},"sourceType":"script"}