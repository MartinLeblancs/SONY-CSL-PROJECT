{"ast":null,"code":"var CONST = require('../../const');\n/**\n * the Rectangle object is an area defined by its position, as indicated by its top-left corner point (x, y) and by its width and its height.\n *\n * @class\n * @memberof PIXI\n * @param x {number} The X coordinate of the upper-left corner of the rectangle\n * @param y {number} The Y coordinate of the upper-left corner of the rectangle\n * @param width {number} The overall width of this rectangle\n * @param height {number} The overall height of this rectangle\n */\n\n\nfunction Rectangle(x, y, width, height) {\n  /**\n   * @member {number}\n   * @default 0\n   */\n  this.x = x || 0;\n  /**\n   * @member {number}\n   * @default 0\n   */\n\n  this.y = y || 0;\n  /**\n   * @member {number}\n   * @default 0\n   */\n\n  this.width = width || 0;\n  /**\n   * @member {number}\n   * @default 0\n   */\n\n  this.height = height || 0;\n  /**\n   * The type of the object, mainly used to avoid `instanceof` checks\n   *\n   * @member {number}\n   */\n\n  this.type = CONST.SHAPES.RECT;\n}\n\nRectangle.prototype.constructor = Rectangle;\nmodule.exports = Rectangle;\n/**\n * A constant empty rectangle.\n *\n * @static\n * @constant\n */\n\nRectangle.EMPTY = new Rectangle(0, 0, 0, 0);\n/**\n * Creates a clone of this Rectangle\n *\n * @return {Rectangle} a copy of the rectangle\n */\n\nRectangle.prototype.clone = function () {\n  return new Rectangle(this.x, this.y, this.width, this.height);\n};\n/**\n * Checks whether the x and y coordinates given are contained within this Rectangle\n *\n * @param x {number} The X coordinate of the point to test\n * @param y {number} The Y coordinate of the point to test\n * @return {boolean} Whether the x/y coordinates are within this Rectangle\n */\n\n\nRectangle.prototype.contains = function (x, y) {\n  if (this.width <= 0 || this.height <= 0) {\n    return false;\n  }\n\n  if (x >= this.x && x < this.x + this.width) {\n    if (y >= this.y && y < this.y + this.height) {\n      return true;\n    }\n  }\n\n  return false;\n};","map":{"version":3,"names":["CONST","require","Rectangle","x","y","width","height","type","SHAPES","RECT","prototype","constructor","module","exports","EMPTY","clone","contains"],"sources":["/home/reyden-martin/Documents/Tech2/HUB/Sony CSL/SONY-CSL-PROJECT/node_modules/react-piano-roll/node_modules/pixi.js/src/core/math/shapes/Rectangle.js"],"sourcesContent":["var CONST = require('../../const');\n\n/**\n * the Rectangle object is an area defined by its position, as indicated by its top-left corner point (x, y) and by its width and its height.\n *\n * @class\n * @memberof PIXI\n * @param x {number} The X coordinate of the upper-left corner of the rectangle\n * @param y {number} The Y coordinate of the upper-left corner of the rectangle\n * @param width {number} The overall width of this rectangle\n * @param height {number} The overall height of this rectangle\n */\nfunction Rectangle(x, y, width, height)\n{\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = x || 0;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = y || 0;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.width = width || 0;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.height = height || 0;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @member {number}\n     */\n    this.type = CONST.SHAPES.RECT;\n}\n\nRectangle.prototype.constructor = Rectangle;\nmodule.exports = Rectangle;\n\n/**\n * A constant empty rectangle.\n *\n * @static\n * @constant\n */\nRectangle.EMPTY = new Rectangle(0, 0, 0, 0);\n\n\n/**\n * Creates a clone of this Rectangle\n *\n * @return {Rectangle} a copy of the rectangle\n */\nRectangle.prototype.clone = function ()\n{\n    return new Rectangle(this.x, this.y, this.width, this.height);\n};\n\n/**\n * Checks whether the x and y coordinates given are contained within this Rectangle\n *\n * @param x {number} The X coordinate of the point to test\n * @param y {number} The Y coordinate of the point to test\n * @return {boolean} Whether the x/y coordinates are within this Rectangle\n */\nRectangle.prototype.contains = function (x, y)\n{\n    if (this.width <= 0 || this.height <= 0)\n    {\n        return false;\n    }\n\n    if (x >= this.x && x < this.x + this.width)\n    {\n        if (y >= this.y && y < this.y + this.height)\n        {\n            return true;\n        }\n    }\n\n    return false;\n};\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyBC,KAAzB,EAAgCC,MAAhC,EACA;EACI;AACJ;AACA;AACA;EACI,KAAKH,CAAL,GAASA,CAAC,IAAI,CAAd;EAEA;AACJ;AACA;AACA;;EACI,KAAKC,CAAL,GAASA,CAAC,IAAI,CAAd;EAEA;AACJ;AACA;AACA;;EACI,KAAKC,KAAL,GAAaA,KAAK,IAAI,CAAtB;EAEA;AACJ;AACA;AACA;;EACI,KAAKC,MAAL,GAAcA,MAAM,IAAI,CAAxB;EAEA;AACJ;AACA;AACA;AACA;;EACI,KAAKC,IAAL,GAAYP,KAAK,CAACQ,MAAN,CAAaC,IAAzB;AACH;;AAEDP,SAAS,CAACQ,SAAV,CAAoBC,WAApB,GAAkCT,SAAlC;AACAU,MAAM,CAACC,OAAP,GAAiBX,SAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAA,SAAS,CAACY,KAAV,GAAkB,IAAIZ,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAlB;AAGA;AACA;AACA;AACA;AACA;;AACAA,SAAS,CAACQ,SAAV,CAAoBK,KAApB,GAA4B,YAC5B;EACI,OAAO,IAAIb,SAAJ,CAAc,KAAKC,CAAnB,EAAsB,KAAKC,CAA3B,EAA8B,KAAKC,KAAnC,EAA0C,KAAKC,MAA/C,CAAP;AACH,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,SAAS,CAACQ,SAAV,CAAoBM,QAApB,GAA+B,UAAUb,CAAV,EAAaC,CAAb,EAC/B;EACI,IAAI,KAAKC,KAAL,IAAc,CAAd,IAAmB,KAAKC,MAAL,IAAe,CAAtC,EACA;IACI,OAAO,KAAP;EACH;;EAED,IAAIH,CAAC,IAAI,KAAKA,CAAV,IAAeA,CAAC,GAAG,KAAKA,CAAL,GAAS,KAAKE,KAArC,EACA;IACI,IAAID,CAAC,IAAI,KAAKA,CAAV,IAAeA,CAAC,GAAG,KAAKA,CAAL,GAAS,KAAKE,MAArC,EACA;MACI,OAAO,IAAP;IACH;EACJ;;EAED,OAAO,KAAP;AACH,CAhBD"},"metadata":{},"sourceType":"script"}