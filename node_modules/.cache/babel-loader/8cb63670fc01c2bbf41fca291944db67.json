{"ast":null,"code":"var core = require('../../core'); // @see https://github.com/substack/brfs/issues/25\n\n\nvar fs = require('fs');\n/**\n * The DisplacementFilter class uses the pixel values from the specified texture (called the displacement map) to perform a displacement of an object.\n * You can use this filter to apply all manor of crazy warping effects\n * Currently the r property of the texture is used to offset the x and the g property of the texture is used to offset the y.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n * @param sprite {Sprite} the sprite used for the displacement map. (make sure its added to the scene!)\n */\n\n\nfunction DisplacementFilter(sprite) {\n  var maskMatrix = new core.Matrix();\n  sprite.renderable = false;\n  core.AbstractFilter.call(this, // vertex shader\n  fs.readFileSync(__dirname + '/displacement.vert', 'utf8'), // fragment shader\n  fs.readFileSync(__dirname + '/displacement.frag', 'utf8'), // uniforms\n  {\n    mapSampler: {\n      type: 'sampler2D',\n      value: sprite.texture\n    },\n    otherMatrix: {\n      type: 'mat3',\n      value: maskMatrix.toArray(true)\n    },\n    scale: {\n      type: 'v2',\n      value: {\n        x: 1,\n        y: 1\n      }\n    }\n  });\n  this.maskSprite = sprite;\n  this.maskMatrix = maskMatrix;\n  this.scale = new core.Point(20, 20);\n}\n\nDisplacementFilter.prototype = Object.create(core.AbstractFilter.prototype);\nDisplacementFilter.prototype.constructor = DisplacementFilter;\nmodule.exports = DisplacementFilter;\n\nDisplacementFilter.prototype.applyFilter = function (renderer, input, output) {\n  var filterManager = renderer.filterManager;\n  filterManager.calculateMappedMatrix(input.frame, this.maskSprite, this.maskMatrix);\n  this.uniforms.otherMatrix.value = this.maskMatrix.toArray(true);\n  this.uniforms.scale.value.x = this.scale.x * (1 / input.frame.width);\n  this.uniforms.scale.value.y = this.scale.y * (1 / input.frame.height);\n  var shader = this.getShader(renderer); // draw the filter...\n\n  filterManager.applyFilter(shader, input, output);\n};\n\nObject.defineProperties(DisplacementFilter.prototype, {\n  /**\n   * The texture used for the displacement map. Must be power of 2 sized texture.\n   *\n   * @member {Texture}\n   * @memberof DisplacementFilter#\n   */\n  map: {\n    get: function get() {\n      return this.uniforms.mapSampler.value;\n    },\n    set: function set(value) {\n      this.uniforms.mapSampler.value = value;\n    }\n  }\n});","map":{"version":3,"names":["core","require","fs","DisplacementFilter","sprite","maskMatrix","Matrix","renderable","AbstractFilter","call","readFileSync","__dirname","mapSampler","type","value","texture","otherMatrix","toArray","scale","x","y","maskSprite","Point","prototype","Object","create","constructor","module","exports","applyFilter","renderer","input","output","filterManager","calculateMappedMatrix","frame","uniforms","width","height","shader","getShader","defineProperties","map","get","set"],"sources":["/home/reyden-martin/Documents/Tech2/HUB/Sony CSL/SONY-CSL-PROJECT/node_modules/react-piano-roll/node_modules/pixi.js/src/filters/displacement/DisplacementFilter.js"],"sourcesContent":["var core = require('../../core');\n// @see https://github.com/substack/brfs/issues/25\nvar fs = require('fs');\n\n/**\n * The DisplacementFilter class uses the pixel values from the specified texture (called the displacement map) to perform a displacement of an object.\n * You can use this filter to apply all manor of crazy warping effects\n * Currently the r property of the texture is used to offset the x and the g property of the texture is used to offset the y.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n * @param sprite {Sprite} the sprite used for the displacement map. (make sure its added to the scene!)\n */\nfunction DisplacementFilter(sprite)\n{\n    var maskMatrix = new core.Matrix();\n    sprite.renderable = false;\n\n    core.AbstractFilter.call(this,\n        // vertex shader\n        fs.readFileSync(__dirname + '/displacement.vert', 'utf8'),\n        // fragment shader\n        fs.readFileSync(__dirname + '/displacement.frag', 'utf8'),\n        // uniforms\n        {\n            mapSampler:     { type: 'sampler2D', value: sprite.texture },\n            otherMatrix:    { type: 'mat3', value: maskMatrix.toArray(true) },\n            scale:          { type: 'v2', value: { x: 1, y: 1 } }\n        }\n    );\n\n    this.maskSprite = sprite;\n    this.maskMatrix = maskMatrix;\n\n\n    this.scale = new core.Point(20,20);\n\n}\n\nDisplacementFilter.prototype = Object.create(core.AbstractFilter.prototype);\nDisplacementFilter.prototype.constructor = DisplacementFilter;\nmodule.exports = DisplacementFilter;\n\nDisplacementFilter.prototype.applyFilter = function (renderer, input, output)\n{\n    var filterManager = renderer.filterManager;\n\n    filterManager.calculateMappedMatrix(input.frame, this.maskSprite, this.maskMatrix);\n\n    this.uniforms.otherMatrix.value = this.maskMatrix.toArray(true);\n    this.uniforms.scale.value.x = this.scale.x * (1/input.frame.width);\n    this.uniforms.scale.value.y = this.scale.y * (1/input.frame.height);\n\n    var shader = this.getShader(renderer);\n     // draw the filter...\n    filterManager.applyFilter(shader, input, output);\n};\n\n\nObject.defineProperties(DisplacementFilter.prototype, {\n    /**\n     * The texture used for the displacement map. Must be power of 2 sized texture.\n     *\n     * @member {Texture}\n     * @memberof DisplacementFilter#\n     */\n    map: {\n        get: function ()\n        {\n            return this.uniforms.mapSampler.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.mapSampler.value = value;\n\n        }\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}