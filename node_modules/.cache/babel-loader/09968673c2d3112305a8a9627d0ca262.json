{"ast":null,"code":"var WebGLManager = require('./WebGLManager');\n/**\n * @class\n * @memberof PIXI\n * @extends PIXI.WebGlManager\n * @param renderer {WebGLRenderer} The renderer this manager works for.\n */\n\n\nfunction BlendModeManager(renderer) {\n  WebGLManager.call(this, renderer);\n  /**\n   * @member {number}\n   */\n\n  this.currentBlendMode = 99999;\n}\n\nBlendModeManager.prototype = Object.create(WebGLManager.prototype);\nBlendModeManager.prototype.constructor = BlendModeManager;\nmodule.exports = BlendModeManager;\n/**\n * Sets-up the given blendMode from WebGL's point of view.\n *\n * @param blendMode {number} the blendMode, should be a Pixi const, such as BlendModes.ADD\n */\n\nBlendModeManager.prototype.setBlendMode = function (blendMode) {\n  if (this.currentBlendMode === blendMode) {\n    return false;\n  }\n\n  this.currentBlendMode = blendMode;\n  var mode = this.renderer.blendModes[this.currentBlendMode];\n  this.renderer.gl.blendFunc(mode[0], mode[1]);\n  return true;\n};","map":{"version":3,"names":["WebGLManager","require","BlendModeManager","renderer","call","currentBlendMode","prototype","Object","create","constructor","module","exports","setBlendMode","blendMode","mode","blendModes","gl","blendFunc"],"sources":["/home/reyden-martin/Documents/Tech2/HUB/Sony CSL/SONY-CSL-PROJECT/node_modules/react-piano-roll/node_modules/pixi.js/src/core/renderers/webgl/managers/BlendModeManager.js"],"sourcesContent":["var WebGLManager = require('./WebGLManager');\n\n/**\n * @class\n * @memberof PIXI\n * @extends PIXI.WebGlManager\n * @param renderer {WebGLRenderer} The renderer this manager works for.\n */\nfunction BlendModeManager(renderer)\n{\n    WebGLManager.call(this, renderer);\n\n    /**\n     * @member {number}\n     */\n    this.currentBlendMode = 99999;\n}\n\nBlendModeManager.prototype = Object.create(WebGLManager.prototype);\nBlendModeManager.prototype.constructor = BlendModeManager;\nmodule.exports = BlendModeManager;\n\n/**\n * Sets-up the given blendMode from WebGL's point of view.\n *\n * @param blendMode {number} the blendMode, should be a Pixi const, such as BlendModes.ADD\n */\nBlendModeManager.prototype.setBlendMode = function (blendMode)\n{\n    if (this.currentBlendMode === blendMode)\n    {\n        return false;\n    }\n\n    this.currentBlendMode = blendMode;\n\n    var mode = this.renderer.blendModes[this.currentBlendMode];\n    this.renderer.gl.blendFunc(mode[0], mode[1]);\n\n    return true;\n};\n"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,CAA0BC,QAA1B,EACA;EACIH,YAAY,CAACI,IAAb,CAAkB,IAAlB,EAAwBD,QAAxB;EAEA;AACJ;AACA;;EACI,KAAKE,gBAAL,GAAwB,KAAxB;AACH;;AAEDH,gBAAgB,CAACI,SAAjB,GAA6BC,MAAM,CAACC,MAAP,CAAcR,YAAY,CAACM,SAA3B,CAA7B;AACAJ,gBAAgB,CAACI,SAAjB,CAA2BG,WAA3B,GAAyCP,gBAAzC;AACAQ,MAAM,CAACC,OAAP,GAAiBT,gBAAjB;AAEA;AACA;AACA;AACA;AACA;;AACAA,gBAAgB,CAACI,SAAjB,CAA2BM,YAA3B,GAA0C,UAAUC,SAAV,EAC1C;EACI,IAAI,KAAKR,gBAAL,KAA0BQ,SAA9B,EACA;IACI,OAAO,KAAP;EACH;;EAED,KAAKR,gBAAL,GAAwBQ,SAAxB;EAEA,IAAIC,IAAI,GAAG,KAAKX,QAAL,CAAcY,UAAd,CAAyB,KAAKV,gBAA9B,CAAX;EACA,KAAKF,QAAL,CAAca,EAAd,CAAiBC,SAAjB,CAA2BH,IAAI,CAAC,CAAD,CAA/B,EAAoCA,IAAI,CAAC,CAAD,CAAxC;EAEA,OAAO,IAAP;AACH,CAbD"},"metadata":{},"sourceType":"script"}