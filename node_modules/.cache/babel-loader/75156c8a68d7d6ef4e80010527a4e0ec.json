{"ast":null,"code":"var SYMBOLS = {\n  'm': ['m3', 'P5'],\n  'mi': ['m3', 'P5'],\n  'min': ['m3', 'P5'],\n  '-': ['m3', 'P5'],\n  'M': ['M3', 'P5'],\n  'ma': ['M3', 'P5'],\n  '': ['M3', 'P5'],\n  '+': ['M3', 'A5'],\n  'aug': ['M3', 'A5'],\n  'dim': ['m3', 'd5'],\n  'o': ['m3', 'd5'],\n  'maj': ['M3', 'P5', 'M7'],\n  'dom': ['M3', 'P5', 'm7'],\n  'ø': ['m3', 'd5', 'm7'],\n  '5': ['P5'],\n  '6/9': ['M3', 'P5', 'M6', 'M9']\n};\n\nmodule.exports = function (symbol) {\n  var c,\n      parsing = 'quality',\n      additionals = [],\n      name,\n      chordLength = 2;\n  var notes = ['P1', 'M3', 'P5', 'm7', 'M9', 'P11', 'M13'];\n  var explicitMajor = false;\n\n  function setChord(name) {\n    var intervals = SYMBOLS[name];\n\n    for (var i = 0, len = intervals.length; i < len; i++) {\n      notes[i + 1] = intervals[i];\n    }\n\n    chordLength = intervals.length;\n  } // Remove whitespace, commas and parentheses\n\n\n  symbol = symbol.replace(/[,\\s\\(\\)]/g, '');\n\n  for (var i = 0, len = symbol.length; i < len; i++) {\n    if (!(c = symbol[i])) return;\n\n    if (parsing === 'quality') {\n      var sub3 = i + 2 < len ? symbol.substr(i, 3).toLowerCase() : null;\n      var sub2 = i + 1 < len ? symbol.substr(i, 2).toLowerCase() : null;\n      if (sub3 in SYMBOLS) name = sub3;else if (sub2 in SYMBOLS) name = sub2;else if (c in SYMBOLS) name = c;else name = '';\n      if (name) setChord(name);\n      if (name === 'M' || name === 'ma' || name === 'maj') explicitMajor = true;\n      i += name.length - 1;\n      parsing = 'extension';\n    } else if (parsing === 'extension') {\n      c = c === '1' && symbol[i + 1] ? +symbol.substr(i, 2) : +c;\n\n      if (!isNaN(c) && c !== 6) {\n        chordLength = (c - 1) / 2;\n        if (chordLength !== Math.round(chordLength)) return new Error('Invalid interval extension: ' + c.toString(10));\n        if (name === 'o' || name === 'dim') notes[3] = 'd7';else if (explicitMajor) notes[3] = 'M7';\n        i += c >= 10 ? 1 : 0;\n      } else if (c === 6) {\n        notes[3] = 'M6';\n        chordLength = Math.max(3, chordLength);\n      } else i -= 1;\n\n      parsing = 'alterations';\n    } else if (parsing === 'alterations') {\n      var alterations = symbol.substr(i).split(/(#|b|add|maj|sus|M)/i),\n          next,\n          flat = false,\n          sharp = false;\n      if (alterations.length === 1) return new Error('Invalid alteration');else if (alterations[0].length !== 0) return new Error('Invalid token: \\'' + alterations[0] + '\\'');\n      var ignore = false;\n      alterations.forEach(function (alt, i, arr) {\n        if (ignore || !alt.length) return ignore = false;\n        var next = arr[i + 1],\n            lower = alt.toLowerCase();\n\n        if (alt === 'M' || lower === 'maj') {\n          if (next === '7') ignore = true;\n          chordLength = Math.max(3, chordLength);\n          notes[3] = 'M7';\n        } else if (lower === 'sus') {\n          var type = 'P4';\n\n          if (next === '2' || next === '4') {\n            ignore = true;\n            if (next === '2') type = 'M2';\n          }\n\n          notes[1] = type; // Replace third with M2 or P4\n        } else if (lower === 'add') {\n          if (next === '9') additionals.push('M9');else if (next === '11') additionals.push('P11');else if (next === '13') additionals.push('M13');\n          ignore = true;\n        } else if (lower === 'b') {\n          flat = true;\n        } else if (lower === '#') {\n          sharp = true;\n        } else {\n          var token = +alt,\n              quality,\n              intPos;\n          if (isNaN(token) || String(token).length !== alt.length) return new Error('Invalid token: \\'' + alt + '\\'');\n\n          if (token === 6) {\n            if (sharp) notes[3] = 'A6';else if (flat) notes[3] = 'm6';else notes[3] = 'M6';\n            chordLength = Math.max(3, chordLength);\n            return;\n          } // Calculate the position in the 'note' array\n\n\n          intPos = (token - 1) / 2;\n          if (chordLength < intPos) chordLength = intPos;\n          if (token < 5 || token === 7 || intPos !== Math.round(intPos)) return new Error('Invalid interval alteration: ' + token);\n          quality = notes[intPos][0]; // Alterate the quality of the interval according the accidentals\n\n          if (sharp) {\n            if (quality === 'd') quality = 'm';else if (quality === 'm') quality = 'M';else if (quality === 'M' || quality === 'P') quality = 'A';\n          } else if (flat) {\n            if (quality === 'A') quality = 'M';else if (quality === 'M') quality = 'm';else if (quality === 'm' || quality === 'P') quality = 'd';\n          }\n\n          sharp = flat = false;\n          notes[intPos] = quality + token;\n        }\n      });\n      parsing = 'ended';\n    } else if (parsing === 'ended') {\n      break;\n    }\n  }\n\n  return notes.slice(0, chordLength + 1).concat(additionals);\n};","map":{"version":3,"names":["SYMBOLS","module","exports","symbol","c","parsing","additionals","name","chordLength","notes","explicitMajor","setChord","intervals","i","len","length","replace","sub3","substr","toLowerCase","sub2","isNaN","Math","round","Error","toString","max","alterations","split","next","flat","sharp","ignore","forEach","alt","arr","lower","type","push","token","quality","intPos","String","slice","concat"],"sources":["/home/reyden-martin/Documents/Tech2/HUB/Sony CSL/SONY-CSL-PROJECT/node_modules/daccord/index.js"],"sourcesContent":["var SYMBOLS = {\n  'm': ['m3', 'P5'],\n  'mi': ['m3', 'P5'],\n  'min': ['m3', 'P5'],\n  '-': ['m3', 'P5'],\n\n  'M': ['M3', 'P5'],\n  'ma': ['M3', 'P5'],\n  '': ['M3', 'P5'],\n\n  '+': ['M3', 'A5'],\n  'aug': ['M3', 'A5'],\n\n  'dim': ['m3', 'd5'],\n  'o': ['m3', 'd5'],\n\n  'maj': ['M3', 'P5', 'M7'],\n  'dom': ['M3', 'P5', 'm7'],\n  'ø': ['m3', 'd5', 'm7'],\n\n  '5': ['P5'],\n\n  '6/9': ['M3', 'P5', 'M6', 'M9']\n};\n\nmodule.exports = function(symbol) {\n  var c, parsing = 'quality', additionals = [], name, chordLength = 2\n  var notes = ['P1', 'M3', 'P5', 'm7', 'M9', 'P11', 'M13'];\n  var explicitMajor = false;\n\n  function setChord(name) {\n    var intervals = SYMBOLS[name];\n    for (var i = 0, len = intervals.length; i < len; i++) {\n      notes[i + 1] = intervals[i];\n    }\n\n    chordLength = intervals.length;\n  }\n\n  // Remove whitespace, commas and parentheses\n  symbol = symbol.replace(/[,\\s\\(\\)]/g, '');\n  for (var i = 0, len = symbol.length; i < len; i++) {\n    if (!(c = symbol[i]))\n      return;\n\n    if (parsing === 'quality') {\n      var sub3 = (i + 2) < len ? symbol.substr(i, 3).toLowerCase() : null;\n      var sub2 = (i + 1) < len ? symbol.substr(i, 2).toLowerCase() : null;\n      if (sub3 in SYMBOLS)\n        name = sub3;\n      else if (sub2 in SYMBOLS)\n        name = sub2;\n      else if (c in SYMBOLS)\n        name = c;\n      else\n        name = '';\n\n      if (name)\n        setChord(name);\n\n      if (name === 'M' || name === 'ma' || name === 'maj')\n        explicitMajor = true;\n\n\n      i += name.length - 1;\n      parsing = 'extension';\n    } else if (parsing === 'extension') {\n      c = (c === '1' && symbol[i + 1]) ? +symbol.substr(i, 2) : +c;\n\n      if (!isNaN(c) && c !== 6) {\n        chordLength = (c - 1) / 2;\n\n        if (chordLength !== Math.round(chordLength))\n          return new Error('Invalid interval extension: ' + c.toString(10));\n\n        if (name === 'o' || name === 'dim')\n          notes[3] = 'd7';\n        else if (explicitMajor)\n          notes[3] = 'M7';\n\n        i += c >= 10 ? 1 : 0;\n      } else if (c === 6) {\n        notes[3] = 'M6';\n        chordLength = Math.max(3, chordLength);\n      } else\n        i -= 1;\n\n      parsing = 'alterations';\n    } else if (parsing === 'alterations') {\n      var alterations = symbol.substr(i).split(/(#|b|add|maj|sus|M)/i),\n          next, flat = false, sharp = false;\n\n      if (alterations.length === 1)\n        return new Error('Invalid alteration');\n      else if (alterations[0].length !== 0)\n        return new Error('Invalid token: \\'' + alterations[0] + '\\'');\n\n      var ignore = false;\n      alterations.forEach(function(alt, i, arr) {\n        if (ignore || !alt.length)\n          return ignore = false;\n\n        var next = arr[i + 1], lower = alt.toLowerCase();\n        if (alt === 'M' || lower === 'maj') {\n          if (next === '7')\n            ignore = true;\n\n          chordLength = Math.max(3, chordLength);\n          notes[3] = 'M7';\n        } else if (lower === 'sus') {\n          var type = 'P4';\n          if (next === '2' || next === '4') {\n            ignore = true;\n\n            if (next === '2')\n              type = 'M2';\n          }\n\n          notes[1] = type; // Replace third with M2 or P4\n        } else if (lower === 'add') {\n          if (next === '9')\n            additionals.push('M9');\n          else if (next === '11')\n            additionals.push('P11');\n          else if (next === '13')\n            additionals.push('M13');\n\n          ignore = true\n        } else if (lower === 'b') {\n          flat = true;\n        } else if (lower === '#') {\n          sharp = true;\n        } else {\n          var token = +alt, quality, intPos;\n          if (isNaN(token) || String(token).length !== alt.length)\n            return new Error('Invalid token: \\'' + alt + '\\'');\n\n          if (token === 6) {\n            if (sharp)\n              notes[3] = 'A6';\n            else if (flat)\n              notes[3] = 'm6';\n            else\n              notes[3] = 'M6';\n\n            chordLength = Math.max(3, chordLength);\n            return;\n          }\n\n          // Calculate the position in the 'note' array\n          intPos = (token - 1) / 2;\n          if (chordLength < intPos)\n            chordLength = intPos;\n\n          if (token < 5 || token === 7 || intPos !== Math.round(intPos))\n            return new Error('Invalid interval alteration: ' + token);\n\n          quality = notes[intPos][0];\n\n          // Alterate the quality of the interval according the accidentals\n          if (sharp) {\n            if (quality === 'd')\n              quality = 'm';\n            else if (quality === 'm')\n              quality = 'M';\n            else if (quality === 'M' || quality === 'P')\n              quality = 'A';\n          } else if (flat) {\n            if (quality === 'A')\n              quality = 'M';\n            else if (quality === 'M')\n              quality = 'm';\n            else if (quality === 'm' || quality === 'P')\n              quality = 'd';\n          }\n\n          sharp = flat = false;\n          notes[intPos] = quality + token;\n        }\n      });\n      parsing = 'ended';\n    } else if (parsing === 'ended') {\n      break;\n    }\n  }\n\n  return notes.slice(0, chordLength + 1).concat(additionals);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}