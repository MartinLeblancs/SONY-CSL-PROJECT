{"ast":null,"code":"/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original pixi version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n *\n * @class\n * @private\n * @memberof PIXI\n * @param renderer {WebGLRenderer} The renderer this sprite batch works for.\n */\nfunction ParticleBuffer(gl, properties, size) {\n  /**\n   * the current WebGL drawing context\n   * @member {WebGLRenderingContext}\n   */\n  this.gl = gl;\n  /**\n   *\n   *\n   * @member {number}\n   */\n\n  this.vertSize = 2;\n  /**\n   *\n   *\n   * @member {number}\n   */\n\n  this.vertByteSize = this.vertSize * 4;\n  /**\n   * The number of images in the SpriteBatch before it flushes.\n   *\n   * @member {number}\n   */\n\n  this.size = size;\n  /**\n   *\n   *\n   * @member {Array}\n   */\n\n  this.dynamicProperties = [];\n  /**\n   *\n   *\n   * @member {Array}\n   */\n\n  this.staticProperties = [];\n\n  for (var i = 0; i < properties.length; i++) {\n    var property = properties[i];\n\n    if (property.dynamic) {\n      this.dynamicProperties.push(property);\n    } else {\n      this.staticProperties.push(property);\n    }\n  }\n\n  this.staticStride = 0;\n  this.staticBuffer = null;\n  this.staticData = null;\n  this.dynamicStride = 0;\n  this.dynamicBuffer = null;\n  this.dynamicData = null;\n  this.initBuffers();\n}\n\nParticleBuffer.prototype.constructor = ParticleBuffer;\nmodule.exports = ParticleBuffer;\n/**\n * Sets up the renderer context and necessary buffers.\n *\n * @private\n * @param gl {WebGLRenderingContext} the current WebGL drawing context\n */\n\nParticleBuffer.prototype.initBuffers = function () {\n  var gl = this.gl;\n  var i;\n  var property;\n  var dynamicOffset = 0;\n  this.dynamicStride = 0;\n\n  for (i = 0; i < this.dynamicProperties.length; i++) {\n    property = this.dynamicProperties[i];\n    property.offset = dynamicOffset;\n    dynamicOffset += property.size;\n    this.dynamicStride += property.size;\n  }\n\n  this.dynamicData = new Float32Array(this.size * this.dynamicStride * 4);\n  this.dynamicBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, this.dynamicData, gl.DYNAMIC_DRAW); // static //\n\n  var staticOffset = 0;\n  this.staticStride = 0;\n\n  for (i = 0; i < this.staticProperties.length; i++) {\n    property = this.staticProperties[i];\n    property.offset = staticOffset;\n    staticOffset += property.size;\n    this.staticStride += property.size;\n  }\n\n  this.staticData = new Float32Array(this.size * this.staticStride * 4);\n  this.staticBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.staticBuffer);\n  gl.bufferData(gl.ARRAY_BUFFER, this.staticData, gl.DYNAMIC_DRAW);\n};\n\nParticleBuffer.prototype.uploadDynamic = function (children, startIndex, amount) {\n  var gl = this.gl;\n\n  for (var i = 0; i < this.dynamicProperties.length; i++) {\n    var property = this.dynamicProperties[i];\n    property.uploadFunction(children, startIndex, amount, this.dynamicData, this.dynamicStride, property.offset);\n  }\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n  gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.dynamicData);\n};\n\nParticleBuffer.prototype.uploadStatic = function (children, startIndex, amount) {\n  var gl = this.gl;\n\n  for (var i = 0; i < this.staticProperties.length; i++) {\n    var property = this.staticProperties[i];\n    property.uploadFunction(children, startIndex, amount, this.staticData, this.staticStride, property.offset);\n  }\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.staticBuffer);\n  gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.staticData);\n};\n/**\n * Starts a new sprite batch.\n *\n */\n\n\nParticleBuffer.prototype.bind = function () {\n  var gl = this.gl;\n  var i, property;\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n\n  for (i = 0; i < this.dynamicProperties.length; i++) {\n    property = this.dynamicProperties[i];\n    gl.vertexAttribPointer(property.attribute, property.size, gl.FLOAT, false, this.dynamicStride * 4, property.offset * 4);\n  }\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.staticBuffer);\n\n  for (i = 0; i < this.staticProperties.length; i++) {\n    property = this.staticProperties[i];\n    gl.vertexAttribPointer(property.attribute, property.size, gl.FLOAT, false, this.staticStride * 4, property.offset * 4);\n  }\n};\n/**\n * Destroys the SpriteBatch.\n *\n */\n\n\nParticleBuffer.prototype.destroy = function () {\n  this.dynamicProperties = null;\n  this.dynamicData = null;\n  this.gl.deleteBuffer(this.dynamicBuffer);\n  this.staticProperties = null;\n  this.staticData = null;\n  this.gl.deleteBuffer(this.staticBuffer);\n};","map":{"version":3,"names":["ParticleBuffer","gl","properties","size","vertSize","vertByteSize","dynamicProperties","staticProperties","i","length","property","dynamic","push","staticStride","staticBuffer","staticData","dynamicStride","dynamicBuffer","dynamicData","initBuffers","prototype","constructor","module","exports","dynamicOffset","offset","Float32Array","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","staticOffset","uploadDynamic","children","startIndex","amount","uploadFunction","bufferSubData","uploadStatic","bind","vertexAttribPointer","attribute","FLOAT","destroy","deleteBuffer"],"sources":["/home/reyden-martin/Documents/Tech2/HUB/Sony CSL/SONY-CSL-PROJECT/node_modules/react-piano-roll/node_modules/pixi.js/src/core/particles/webgl/ParticleBuffer.js"],"sourcesContent":["\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original pixi version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n *\n * @class\n * @private\n * @memberof PIXI\n * @param renderer {WebGLRenderer} The renderer this sprite batch works for.\n */\nfunction ParticleBuffer(gl, properties, size)\n{\n    /**\n     * the current WebGL drawing context\n     * @member {WebGLRenderingContext}\n     */\n    this.gl = gl;\n\n    /**\n     *\n     *\n     * @member {number}\n     */\n    this.vertSize = 2;\n\n    /**\n     *\n     *\n     * @member {number}\n     */\n    this.vertByteSize = this.vertSize * 4;\n\n    /**\n     * The number of images in the SpriteBatch before it flushes.\n     *\n     * @member {number}\n     */\n    this.size = size;\n\n    /**\n     *\n     *\n     * @member {Array}\n     */\n    this.dynamicProperties = [];\n\n    /**\n     *\n     *\n     * @member {Array}\n     */\n    this.staticProperties = [];\n\n    for (var i = 0; i < properties.length; i++)\n    {\n        var property = properties[i];\n\n        if(property.dynamic)\n        {\n            this.dynamicProperties.push(property);\n        }\n        else\n        {\n            this.staticProperties.push(property);\n        }\n    }\n\n    this.staticStride = 0;\n    this.staticBuffer = null;\n    this.staticData = null;\n\n    this.dynamicStride = 0;\n    this.dynamicBuffer = null;\n    this.dynamicData = null;\n\n    this.initBuffers();\n\n}\n\nParticleBuffer.prototype.constructor = ParticleBuffer;\nmodule.exports = ParticleBuffer;\n\n/**\n * Sets up the renderer context and necessary buffers.\n *\n * @private\n * @param gl {WebGLRenderingContext} the current WebGL drawing context\n */\nParticleBuffer.prototype.initBuffers = function ()\n{\n    var gl = this.gl;\n    var i;\n    var property;\n\n    var dynamicOffset = 0;\n    this.dynamicStride = 0;\n\n    for (i = 0; i < this.dynamicProperties.length; i++)\n    {\n        property = this.dynamicProperties[i];\n\n        property.offset = dynamicOffset;\n        dynamicOffset += property.size;\n        this.dynamicStride += property.size;\n    }\n\n    this.dynamicData = new Float32Array( this.size * this.dynamicStride * 4);\n    this.dynamicBuffer = gl.createBuffer();\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.dynamicData, gl.DYNAMIC_DRAW);\n\n\n    // static //\n    var staticOffset = 0;\n    this.staticStride = 0;\n\n    for (i = 0; i < this.staticProperties.length; i++)\n    {\n        property = this.staticProperties[i];\n\n        property.offset = staticOffset;\n        staticOffset += property.size;\n        this.staticStride += property.size;\n    }\n\n    this.staticData = new Float32Array( this.size * this.staticStride * 4);\n    this.staticBuffer = gl.createBuffer();\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.staticBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.staticData, gl.DYNAMIC_DRAW);\n\n};\n\nParticleBuffer.prototype.uploadDynamic = function(children, startIndex, amount)\n{\n    var gl = this.gl;\n\n    for (var i = 0; i < this.dynamicProperties.length; i++)\n    {\n        var property = this.dynamicProperties[i];\n        property.uploadFunction(children, startIndex, amount, this.dynamicData, this.dynamicStride, property.offset);\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.dynamicData);\n};\n\nParticleBuffer.prototype.uploadStatic = function(children, startIndex, amount)\n{\n    var gl = this.gl;\n\n    for (var i = 0; i < this.staticProperties.length; i++)\n    {\n        var property = this.staticProperties[i];\n        property.uploadFunction(children, startIndex, amount, this.staticData, this.staticStride, property.offset);\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.staticBuffer);\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.staticData);\n};\n\n/**\n * Starts a new sprite batch.\n *\n */\nParticleBuffer.prototype.bind = function ()\n{\n    var gl = this.gl;\n    var i, property;\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.dynamicBuffer);\n\n    for (i = 0; i < this.dynamicProperties.length; i++)\n    {\n        property = this.dynamicProperties[i];\n        gl.vertexAttribPointer(property.attribute, property.size, gl.FLOAT, false, this.dynamicStride * 4, property.offset * 4);\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.staticBuffer);\n\n    for (i = 0; i < this.staticProperties.length; i++)\n    {\n        property = this.staticProperties[i];\n        gl.vertexAttribPointer(property.attribute, property.size, gl.FLOAT, false, this.staticStride * 4, property.offset * 4);\n    }\n};\n\n/**\n * Destroys the SpriteBatch.\n *\n */\nParticleBuffer.prototype.destroy = function ()\n{\n    this.dynamicProperties = null;\n    this.dynamicData = null;\n    this.gl.deleteBuffer(this.dynamicBuffer);\n\n    this.staticProperties = null;\n    this.staticData = null;\n    this.gl.deleteBuffer(this.staticBuffer);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}