{"ast":null,"code":"var core = require('../../core'); // @see https://github.com/substack/brfs/issues/25\n\n\nvar fs = require('fs');\n/**\n * The ConvolutionFilter class applies a matrix convolution filter effect.\n * A convolution combines pixels in the input image with neighboring pixels to produce a new image.\n * A wide variety of image effects can be achieved through convolutions, including blurring, edge\n * detection, sharpening, embossing, and beveling. The matrix should be specified as a 9 point Array.\n * See http://docs.gimp.org/en/plug-in-convmatrix.html for more info.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n * @param matrix {number[]} An array of values used for matrix transformation. Specified as a 9 point Array.\n * @param width {number} Width of the object you are transforming\n * @param height {number} Height of the object you are transforming\n */\n\n\nfunction ConvolutionFilter(matrix, width, height) {\n  core.AbstractFilter.call(this, // vertex shader\n  null, // fragment shader\n  fs.readFileSync(__dirname + '/convolution.frag', 'utf8'), // custom uniforms\n  {\n    matrix: {\n      type: '1fv',\n      value: new Float32Array(matrix)\n    },\n    texelSize: {\n      type: 'v2',\n      value: {\n        x: 1 / width,\n        y: 1 / height\n      }\n    }\n  });\n}\n\nConvolutionFilter.prototype = Object.create(core.AbstractFilter.prototype);\nConvolutionFilter.prototype.constructor = ConvolutionFilter;\nmodule.exports = ConvolutionFilter;\nObject.defineProperties(ConvolutionFilter.prototype, {\n  /**\n   * An array of values used for matrix transformation. Specified as a 9 point Array.\n   *\n   * @member {number[]}\n   * @memberof ConvolutionFilter#\n   */\n  matrix: {\n    get: function get() {\n      return this.uniforms.matrix.value;\n    },\n    set: function set(value) {\n      this.uniforms.matrix.value = new Float32Array(value);\n    }\n  },\n\n  /**\n   * Width of the object you are transforming\n   *\n   * @member {number}\n   * @memberof ConvolutionFilter#\n   */\n  width: {\n    get: function get() {\n      return 1 / this.uniforms.texelSize.value.x;\n    },\n    set: function set(value) {\n      this.uniforms.texelSize.value.x = 1 / value;\n    }\n  },\n\n  /**\n   * Height of the object you are transforming\n   *\n   * @member {number}\n   * @memberof ConvolutionFilter#\n   */\n  height: {\n    get: function get() {\n      return 1 / this.uniforms.texelSize.value.y;\n    },\n    set: function set(value) {\n      this.uniforms.texelSize.value.y = 1 / value;\n    }\n  }\n});","map":{"version":3,"names":["core","require","fs","ConvolutionFilter","matrix","width","height","AbstractFilter","call","readFileSync","__dirname","type","value","Float32Array","texelSize","x","y","prototype","Object","create","constructor","module","exports","defineProperties","get","uniforms","set"],"sources":["/home/reyden-martin/Documents/Tech2/HUB/Sony CSL/SONY-CSL-PROJECT/node_modules/react-piano-roll/node_modules/pixi.js/src/filters/convolution/ConvolutionFilter.js"],"sourcesContent":["var core = require('../../core');\n// @see https://github.com/substack/brfs/issues/25\nvar fs = require('fs');\n\n/**\n * The ConvolutionFilter class applies a matrix convolution filter effect.\n * A convolution combines pixels in the input image with neighboring pixels to produce a new image.\n * A wide variety of image effects can be achieved through convolutions, including blurring, edge\n * detection, sharpening, embossing, and beveling. The matrix should be specified as a 9 point Array.\n * See http://docs.gimp.org/en/plug-in-convmatrix.html for more info.\n *\n * @class\n * @extends PIXI.AbstractFilter\n * @memberof PIXI.filters\n * @param matrix {number[]} An array of values used for matrix transformation. Specified as a 9 point Array.\n * @param width {number} Width of the object you are transforming\n * @param height {number} Height of the object you are transforming\n */\nfunction ConvolutionFilter(matrix, width, height)\n{\n    core.AbstractFilter.call(this,\n        // vertex shader\n        null,\n        // fragment shader\n        fs.readFileSync(__dirname + '/convolution.frag', 'utf8'),\n        // custom uniforms\n        {\n            matrix:     { type: '1fv', value: new Float32Array(matrix) },\n            texelSize:  { type: 'v2', value: { x: 1 / width, y: 1 / height } }\n        }\n    );\n}\n\nConvolutionFilter.prototype = Object.create(core.AbstractFilter.prototype);\nConvolutionFilter.prototype.constructor = ConvolutionFilter;\nmodule.exports = ConvolutionFilter;\n\nObject.defineProperties(ConvolutionFilter.prototype, {\n    /**\n     * An array of values used for matrix transformation. Specified as a 9 point Array.\n     *\n     * @member {number[]}\n     * @memberof ConvolutionFilter#\n     */\n    matrix: {\n        get: function ()\n        {\n            return this.uniforms.matrix.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.matrix.value = new Float32Array(value);\n        }\n    },\n\n    /**\n     * Width of the object you are transforming\n     *\n     * @member {number}\n     * @memberof ConvolutionFilter#\n     */\n    width: {\n        get: function ()\n        {\n            return 1/this.uniforms.texelSize.value.x;\n        },\n        set: function (value)\n        {\n            this.uniforms.texelSize.value.x = 1/value;\n        }\n    },\n\n    /**\n     * Height of the object you are transforming\n     *\n     * @member {number}\n     * @memberof ConvolutionFilter#\n     */\n    height: {\n        get: function ()\n        {\n            return 1/this.uniforms.texelSize.value.y;\n        },\n        set: function (value)\n        {\n            this.uniforms.texelSize.value.y = 1/value;\n        }\n    }\n});\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAAlB,C,CACA;;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,iBAAT,CAA2BC,MAA3B,EAAmCC,KAAnC,EAA0CC,MAA1C,EACA;EACIN,IAAI,CAACO,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,EACI;EACA,IAFJ,EAGI;EACAN,EAAE,CAACO,YAAH,CAAgBC,SAAS,GAAG,mBAA5B,EAAiD,MAAjD,CAJJ,EAKI;EACA;IACIN,MAAM,EAAM;MAAEO,IAAI,EAAE,KAAR;MAAeC,KAAK,EAAE,IAAIC,YAAJ,CAAiBT,MAAjB;IAAtB,CADhB;IAEIU,SAAS,EAAG;MAAEH,IAAI,EAAE,IAAR;MAAcC,KAAK,EAAE;QAAEG,CAAC,EAAE,IAAIV,KAAT;QAAgBW,CAAC,EAAE,IAAIV;MAAvB;IAArB;EAFhB,CANJ;AAWH;;AAEDH,iBAAiB,CAACc,SAAlB,GAA8BC,MAAM,CAACC,MAAP,CAAcnB,IAAI,CAACO,cAAL,CAAoBU,SAAlC,CAA9B;AACAd,iBAAiB,CAACc,SAAlB,CAA4BG,WAA5B,GAA0CjB,iBAA1C;AACAkB,MAAM,CAACC,OAAP,GAAiBnB,iBAAjB;AAEAe,MAAM,CAACK,gBAAP,CAAwBpB,iBAAiB,CAACc,SAA1C,EAAqD;EACjD;AACJ;AACA;AACA;AACA;AACA;EACIb,MAAM,EAAE;IACJoB,GAAG,EAAE,eACL;MACI,OAAO,KAAKC,QAAL,CAAcrB,MAAd,CAAqBQ,KAA5B;IACH,CAJG;IAKJc,GAAG,EAAE,aAAUd,KAAV,EACL;MACI,KAAKa,QAAL,CAAcrB,MAAd,CAAqBQ,KAArB,GAA6B,IAAIC,YAAJ,CAAiBD,KAAjB,CAA7B;IACH;EARG,CAPyC;;EAkBjD;AACJ;AACA;AACA;AACA;AACA;EACIP,KAAK,EAAE;IACHmB,GAAG,EAAE,eACL;MACI,OAAO,IAAE,KAAKC,QAAL,CAAcX,SAAd,CAAwBF,KAAxB,CAA8BG,CAAvC;IACH,CAJE;IAKHW,GAAG,EAAE,aAAUd,KAAV,EACL;MACI,KAAKa,QAAL,CAAcX,SAAd,CAAwBF,KAAxB,CAA8BG,CAA9B,GAAkC,IAAEH,KAApC;IACH;EARE,CAxB0C;;EAmCjD;AACJ;AACA;AACA;AACA;AACA;EACIN,MAAM,EAAE;IACJkB,GAAG,EAAE,eACL;MACI,OAAO,IAAE,KAAKC,QAAL,CAAcX,SAAd,CAAwBF,KAAxB,CAA8BI,CAAvC;IACH,CAJG;IAKJU,GAAG,EAAE,aAAUd,KAAV,EACL;MACI,KAAKa,QAAL,CAAcX,SAAd,CAAwBF,KAAxB,CAA8BI,CAA9B,GAAkC,IAAEJ,KAApC;IACH;EARG;AAzCyC,CAArD"},"metadata":{},"sourceType":"script"}